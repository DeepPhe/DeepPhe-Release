//created on: Feb 15, 2018
package org.healthnlp.deepphe.uima.drools.common

import java.lang.Object;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.UUID;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fact.Fact;
import org.healthnlp.deepphe.fact.BodySiteFact;
import org.healthnlp.deepphe.fact.FactFactory;
import org.healthnlp.deepphe.fact.FactHelper;

import org.healthnlp.deepphe.summary.*;
import org.healthnlp.deepphe.uima.drools.*;
import org.healthnlp.deepphe.uima.drools.util.LocationHistogram;

import org.drools.core.spi.KnowledgeHelper;



	function void updateMergedTumor( TumorLocator tl, MergedTumor mt, KnowledgeHelper kh ) {
		if(mt.getHistologicType() == "" && !tl.getHistologicType().equals("")){
			 mt.setHistologicType(tl.getHistologicType());
		}
		//System.out.println("MT adding child: "+tl.getTumorSiteFact().getName());
	 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
	 	kh.insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
 		tl.getTumorSiteFact().getSummaryId(), mt.getTumorSummaryID()));
 		
 		if(tl.getBodySideFact() != null){
		 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
		 	kh.insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
	 		tl.getBodySideFact().getSummaryId(), mt.getTumorSummaryID()));
	 	}
	 	if(	tl.getQuadrantFact() != null){
		 	mt.addTumorFact(FHIRConstants.QUADRANT, tl.getQuadrantFact());
		 	kh.insert(new IdMapper(tl.getQuadrantFact().getIdentifier(), mt.getMergedTumorId(), 
		 	tl.getQuadrantFact().getSummaryId(), mt.getTumorSummaryID()));
	 	}		
		if(tl.getClockfacePosFact() != null){ 	
		 	mt.addTumorFact(FHIRConstants.CLOCKFACE_POSITION, tl.getClockfacePosFact());
		 	kh.insert(new IdMapper(tl.getClockfacePosFact().getIdentifier(), mt.getMergedTumorId(), 
		 	tl.getClockfacePosFact().getSummaryId(), mt.getTumorSummaryID()));
		}
 	
	 	tl.setReadyForRetraction(true);
		kh.update (tl);
	}

	function TumorLocator createTumorLocator(Fact siteF, Fact sideF, Fact quadF, Fact clockF){
		TumorLocator tl = new TumorLocator();
		tl.setTumorSiteFact(siteF);
		tl.setDocTumorId(siteF.getSummaryId());
		tl.setBodySiteFromDrools(siteF.getName());
		tl.setDocType(siteF.getDocumentType());
		
		if(sideF != null){
			tl.setBodySideFact(sideF);
			tl.setBodySide(sideF.getName());
		}
		
		if(quadF != null){
			tl.setQuadrantFact(quadF);
			tl.setQuadrant(quadF.getName());
		}
		
		if(clockF != null){
			tl.setClockfacePosFact(clockF);
			tl.setClockFacePos(clockF.getName());
		}
		return tl;
	}

declare toBeRetracted
	fact : Fact
end


/**
* Creating TumorLocators - plain stucture  that holds Tu+side+Q+clockPos 
* with bodySite ancestors for each side, Q or clockPos
*/

rule "collect_locations"
	salience 99999
	no-loop true
	when	
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)
		$tumor1_f : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, 
					documentType != FHIRConstants.RECORD_SUMMARY, 
					$tumor1_name : name, $tSummaryId : summaryId)
		not(TumorLocator( tumorSiteFact == $tumor1_f))
		
		$sideMap : Map()
		from accumulate ( $fact : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, 
					category == FHIRConstants.HAS_BODY_MODIFIER, summaryId == $tSummaryId,
					$modifName : name, type ==FHIRConstants.LATERALITY),
			init( HashMap mm = new HashMap(); ),
			action( if(mm.get($modifName) == null) mm.put($modifName, new ArrayList());
			((List)mm.get($modifName)).add($fact); ),
            reverse ( ((List)mm.get($modifName)).remove($fact); ), 
        	result( mm ) ) 
        
       $quadMap : Map()	
        from accumulate ( $fact : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, 
        			category == FHIRConstants.HAS_BODY_MODIFIER, summaryId == $tSummaryId,
					$modifName : name, ancestors contains FHIRConstants.QUADRANT),
			init( HashMap qm = new HashMap(); ),
			action( if(qm.get($modifName) == null) qm.put($modifName, new ArrayList());
			((List)qm.get($modifName)).add($fact); ),
            reverse ( ((List)qm.get($modifName)).remove($fact); ), 
        	result( qm ) ) 	
        	
        $clockMap : Map()	
        from accumulate ( $fact : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, summaryId == $tSummaryId,
					$modifName : name, ancestors contains FHIRConstants.CLOCKFACE_POSITION),
			init( HashMap cm = new HashMap(); ),
			action( if(cm.get($modifName) == null) cm.put($modifName, new ArrayList());
			((List)cm.get($modifName)).add($fact); ),
            reverse ( ((List)cm.get($modifName)).remove($fact); ), 
        	result( cm ) )
        
        then
//System.out.println("collect_locations START: $sideMap.size(): "+$sideMap.size()+" $quadMap.size(): "+$quadMap.size()+" $clockMap.size(): "+$clockMap.size());
//System.out.println("collect_locations for: "+ $tumor1_f.getName()+"  sumId :"+$tumor1_f.getSummaryId());    	
  			if($sideMap.size() == 0 && $quadMap.size() == 0 && $clockMap.size() == 0){
  			
  				TumorLocator tl = createTumorLocator($tumor1_f, null, null, null);
				insert(tl);
  			}
  			else 
  			if($sideMap.size() == 1){
  				String firstSideKey = (String)$sideMap.keySet().iterator().next();
  				Fact sideF = (Fact)((List)$sideMap.get(firstSideKey)).get(0);
  				String sideName = sideF.getName();
  				if($quadMap.size() > 0 && $clockMap.size() == 0){
  					for(Object key : $quadMap.keySet()){
						List listObj = (List)$quadMap.get(key);
						for(Object ff:listObj){
							TumorLocator tl = createTumorLocator($tumor1_f, sideF, (Fact)ff, null);
							insert(tl);
						}
					}
  				}
  				else if($quadMap.size() == 0 && $clockMap.size() > 0){
  					for(Object key : $clockMap.keySet()){
						List listObj = (List)$clockMap.get(key);
						for(Object ff:listObj){
							TumorLocator tl = createTumorLocator($tumor1_f, sideF, null, (Fact)ff);
							
							String inferredQ = TumorLocator.normalizeQuadrant(sideName, (String)key);
							if(!"".equals(inferredQ))
								tl.setQuadrant(inferredQ);
							insert(tl);
						}
					}
  				}
  				else if($quadMap.size() > 0 && $clockMap.size() > 0){			
  					for(Object qkey : $quadMap.keySet()){
						List qObj = (List)$quadMap.get(qkey);
						for(Object ff:qObj){
							TumorLocator tl = createTumorLocator($tumor1_f, sideF, (Fact)ff, null);
							
							for(Object ckey : $clockMap.keySet()){
								List cObj = (List)$clockMap.get(ckey);
								for(Object cf:cObj){
//ATTENTION: This check prevents adding clockface to incorrect quadrant (PateintX)
									if(TumorLocator.clockFactInQuadrant(sideName, (String)ckey, (String)qkey)){
										if(tl.getClockfacePosFact() == null){
											tl.setClockFacePos((String)ckey);
											tl.setClockfacePosFact((Fact)cf);
		
										}
										else{
										//create new tl
											TumorLocator tli = createTumorLocator($tumor1_f, sideF, (Fact)ff, (Fact)cf);						
											insert(tli);
										}
									}
								}
							}// for(Object ckey : $clockMap.keySet())
							insert(tl);
						}
					}
  				}
  				else{ // $sideMap.keySet() > 1
  					for(Object key : $sideMap.keySet()){
						List listObj = (List)$sideMap.get(key);
						for(Object ff:listObj){
							TumorLocator tl = createTumorLocator($tumor1_f, (Fact)ff, null, null);
							insert(tl);
						}
					}
  				}
  				
  			}
  			else{
	        //$sideMap
	        	for(Object key : $sideMap.keySet()){
					List listObj = (List)$sideMap.get(key);
					for(Object ff:listObj){
						TumorLocator tl = createTumorLocator($tumor1_f, (Fact)ff, null, null);
						insert(tl);
					}
				}
			//$quadMap	
				for(Object key : $quadMap.keySet()){
					List listObj = (List)$quadMap.get(key);
					for(Object ff:listObj){
						TumorLocator tl = createTumorLocator($tumor1_f, null, (Fact)ff, null);
						insert(tl);
					}
				}
			//$clockMap	
				for(Object key : $clockMap.keySet()){
					List listObj = (List)$clockMap.get(key);
					for(Object ff:listObj){
						TumorLocator tl = createTumorLocator($tumor1_f, null, null, (Fact)ff);
						insert(tl);
					}
				}
			}
////System.out.println("collect_locations");
//System.out.print(".");
  end
  
  
 rule "create_histogram"
	salience 99969
	no-loop true
	when 
		Domain($domainName : domainName)
		$record : MedicalRecord()
		$tl : TumorLocator($bodySite : bodySite, $bodySide : bodySide, rulesApplied not contains "create_histogram")
	
		$siteSet : Set()
			from collect (TumorLocator(bodySite == $bodySite, bodySide == $bodySide, 
					rulesApplied not contains "create_histogram"))
	then
		for(Object obj : $siteSet){
			modify((TumorLocator)obj){addRulesApplied("create_histogram")};
		}
		
		LocationHistogram lh = LocationHistogram.getHist($domainName, $record.getPatientName(), LocationHistogram.RAW);
		lh.addRow($bodySite, $bodySide, $siteSet.size(), "");
		System.out.print(".");
end

rule "write_raw_histogram"
	salience 99959
	no-loop true
	when
		$record : MedicalRecord()
		Domain($domainName : domainName)
		not (String(this == "done_with_raw_hist"))
	then
		LocationHistogram lh = LocationHistogram.getHist($domainName, $record.getPatientName(), LocationHistogram.RAW);
		lh.writeAll();
		insert("done_with_raw_hist");
end	
	

 //collapse tumors into most specific body location if they have the same tumorId
 rule "collapse-to-most-specific-same-id"
	salience 99930
	no-loop true
	when
		$parent_fact  : TumorLocator($parent_bodySite : bodySite, $docTumorId : docTumorId, readyForRetraction == false)			 
		$child_fact  : TumorLocator($child_bodySite : bodySite, $child_bodySite != $parent_bodySite,
					bodySiteAncestors contains $parent_bodySite, docTumorId == $docTumorId, readyForRetraction == false)
	then
//System.out.println("collapse-to-most-specific-same-id child: "+$child_fact.getInfo());
		(($child_fact.getTumorSiteFact()).getProvenanceFacts()).add($parent_fact.getTumorSiteFact());
		modify($parent_fact) { setReadyForRetraction(true);}
end

		


rule "merge-bilateral"
	salience 99925
	no-loop true
	when
		$child_fact  : TumorLocator($child_bodySite : bodySite, $child_bodySide : bodySide,
					$child_bodySide !="", readyForRetraction == false, $childAncestors : bodySiteAncestors)
		// make sure this one is the most specific
		not(TumorLocator(bodySite != $child_bodySite, bodySiteAncestors contains $child_bodySite, 
				$this_bodySide : bodySide, ($this_bodySide == $child_bodySide || $this_bodySide ==""),
						 readyForRetraction == false))
		//bilateral
		TumorLocator(bodySite == $child_bodySite, bodySide == FHIRConstants.BILATERAL, readyForRetraction == false)				 
						 
		$sameNameTumors : Set()
      	from collect(TumorLocator(bodySite == $child_bodySite, readyForRetraction == false))
      	
      	
      	//now all parents
      	$allParents : Set()
      	from collect(TumorLocator(bodySite != $child_bodySite, $childAncestors contains bodySite, 
      				readyForRetraction == false))
      
	then
		MergedTumor mt = new MergedTumor();
		mt.setBodySite($child_bodySite);
		mt.setBodySide(FHIRConstants.BILATERAL);
//System.out.println("merge-to-more-specific-with-side site: "+$child_bodySite+" side: "+$child_bodySide+" sID: "+$child_fact.getSummaryId());		 	
		//most specific
		for(Object tObj : $sameNameTumors){
			updateMergedTumor( (TumorLocator)tObj, mt, drools );
		}
		
		//parents: add all
		for(Object tObj : $allParents){
			TumorLocator tl = (TumorLocator)tObj;
			updateMergedTumor( tl, mt, drools );
			// retract all parentfacts
			insert(new toBeRetracted(tl.getTumorSiteFact()));
			if(tl.getBodySideFact() != null)
				insert(new toBeRetracted(tl.getBodySideFact()));
		}
		
		insert(mt);
	
System.out.print(".");
end


rule "merge-to-more-specific-with-side"
	salience 99920
	no-loop true
	when
		$child_fact  : TumorLocator($child_bodySite : bodySite, $child_bodySide : bodySide,
					$child_bodySide !="", readyForRetraction == false, $childAncestors : bodySiteAncestors)
		// make sure this one is the most specific
		not(TumorLocator(bodySite != $child_bodySite, bodySiteAncestors contains $child_bodySite, 
				$this_bodySide : bodySide, ($this_bodySide == $child_bodySide || $this_bodySide ==""),
						 readyForRetraction == false))
		$sameTumors : Set()
      	from collect(TumorLocator(bodySite == $child_bodySite, 
      			bodySide == $child_bodySide, readyForRetraction == false))
      	
      	$sameNoSideTumors : Set()
      	from collect(TumorLocator(bodySite == $child_bodySite, 
      			bodySide == "", readyForRetraction == false))
      		
      	$sameOtherSideTumor : Set()
		from accumulate (TumorLocator(bodySite == $child_bodySite, $otherBodySide : bodySide,
      			$otherBodySide != "", $otherBodySide != $child_bodySide, 
      			$otherBodySide != FHIRConstants.BILATERAL,  readyForRetraction == false, 
      			$tumorSiteFact : tumorSiteFact),
			init( Set mm = new HashSet(); ),
			action( mm.add($tumorSiteFact); ),
        	result( mm ) ) 		
      	
      	//now parents
      	$parentSameSide : Set()
      	from collect(TumorLocator(bodySite != $child_bodySite, $childAncestors contains bodySite, bodySide == $child_bodySide,
      				readyForRetraction == false))
      		
     	$parentNoSide : Set()
      	from collect(TumorLocator(bodySite != $child_bodySite, $childAncestors contains bodySite, bodySide == "",
      				readyForRetraction == false))

	then
		MergedTumor mt = new MergedTumor();
		mt.setBodySite($child_bodySite);
		mt.setBodySide($child_bodySide);
//System.out.println("merge-to-more-specific-with-side site: "+$child_bodySite+" side: "+$child_bodySide+" sID: "+$child_fact.getSummaryId());		 	
//if($child_bodySite.equals("Cervix_Uteri")){
////System.out.println("CERVI: ($child_bodySide: "+$child_bodySide+"  $sameTumors: "+$sameTumors.size()+"  $sameOtherSideTumor : "+$sameOtherSideTumor.size()+" sameNoSideTumors: "+$sameNoSideTumors.size()); 
//}		
		
		//most specific
		for(Object tObj : $sameTumors){
			updateMergedTumor( (TumorLocator)tObj, mt, drools );
		}
		
		//parents: add all from the same side
		for(Object tObj : $parentSameSide){
			TumorLocator tl = (TumorLocator)tObj;
			updateMergedTumor( tl, mt, drools );
			// retract all parentfacts
			insert(new toBeRetracted(tl.getTumorSiteFact()));
			if(tl.getBodySideFact() != null)
				insert(new toBeRetracted(tl.getBodySideFact()));
		}
		
		// no side: in presence of other side - add only those that have summaryID included into mt.tumorSummaryIdSet
		//collect all other side id's
		boolean hasSingleSide = true;
		Set<String> otherSideIdSet = new HashSet<String>();
		if($sameOtherSideTumor.size() > 0){
			hasSingleSide = false;
			for(Object obj : $sameOtherSideTumor)
				otherSideIdSet.add(((Fact)obj).getSummaryId());
		}
		
		for(Object tObj : $sameNoSideTumors){
		 	TumorLocator tl = (TumorLocator)tObj;
		 	
			if(	hasSingleSide || mt.getTumorSummaryIdSet().contains(tl.getTumorSiteFact().getSummaryId())){	
				updateMergedTumor( tl, mt, drools );
			}
		}
		
		// parents without side:
		//(1) - no other side => include all
		//(2) - exists other side => include only those that are NOT in sameOtherSideTumorId set
		for(Object tObj : $parentNoSide){
			TumorLocator tl = (TumorLocator)tObj;
			if(hasSingleSide || !otherSideIdSet.contains(tl.getTumorSiteFact().getSummaryId())){
				updateMergedTumor(tl, mt, drools );
				// retract all parentfacts
				insert(new toBeRetracted(tl.getTumorSiteFact()));
				if(tl.getBodySideFact() != null)
					insert(new toBeRetracted(tl.getBodySideFact()));
			}
		}
					
		insert(mt);
		//update(mt);	
System.out.print(".");
end


rule "merge-to-more-specific-no-side"
	salience 99918
	no-loop true
	when
		$child_fact  : TumorLocator($child_bodySite : bodySite, bodySide == "",
					readyForRetraction == false, $childAncestors : bodySiteAncestors)
		// make sure this one is the most specific
		not(TumorLocator(bodySite != $child_bodySite, bodySiteAncestors contains $child_bodySite, 
				readyForRetraction == false))
				
		$sameTumors : Set()
      	from collect(TumorLocator(bodySite == $child_bodySite, 
      			bodySide == "", readyForRetraction == false))
      	
      	//now ALL parents
      	$allParents : Map()	
        from accumulate ( $tl : TumorLocator(bodySite != $child_bodySite,  $childAncestors contains bodySite, 
        			$bodySide : bodySide, readyForRetraction == false),
			init( HashMap mm = new HashMap(); ),
			action( if(mm.get($bodySide) == null) mm.put($bodySide, new ArrayList());
			((List)mm.get($bodySide)).add($tl); ),
            reverse ( ((List)mm.get($bodySide)).remove($tl); ), 
        	result( mm ) )
        	
       //parents by summaryId
       //now ALL parents
      	$parentsById : Map()	
        from accumulate ( $tl : TumorLocator(bodySite != $child_bodySite,  $childAncestors contains bodySite, 
        			$summaryId : summaryId, readyForRetraction == false),
			init( HashMap sm = new HashMap(); ),
			action( if(sm.get($summaryId) == null) sm.put($summaryId, new ArrayList());
			((List)sm.get($summaryId)).add($tl); ),
            reverse ( ((List)sm.get($summaryId)).remove($tl); ), 
        	result( sm ) )
      	
	then
		MergedTumor mt = new MergedTumor();
		mt.setBodySite($child_bodySite);
//System.out.println("merge-to-more-specific-no-side ");

		boolean hasSingleSide = true;
		if($allParents.size() > 1)
			hasSingleSide = false;		 	
		//most specific
		for(Object tObj : $sameTumors){
			TumorLocator tl = (TumorLocator)tObj;
			if(hasSingleSide){
				updateMergedTumor( tl, mt, drools );
			} 
			else {
				tl.setReadyForRetraction(true);
				hasSingleSide = false;
				update (tl);
				//TODO: ask: should we create "Bilateral" when reprt gas R and L sides?
				// Now it's not created.
				System.err.println("Can't create MergedTumor for : "+tl.getInfo()+" since it has no side and \n"+
				"there are  parents with multiple body sides");
			}
		}
		
		for(Object key : $allParents.keySet()){
			List listObj = (List)$allParents.get(key);
			TumorLocator tl = null;
			for(Object tObj:listObj){
				tl = (TumorLocator)tObj;
				mt.setBodySide((String)key);
				updateMergedTumor( tl, mt, drools );
				// retract all parentfacts
				insert(new toBeRetracted(tl.getTumorSiteFact()));
				if(tl.getBodySideFact() != null)
					insert(new toBeRetracted(tl.getBodySideFact()));
			}
		}
		
		if(hasSingleSide){			
			insert(mt);
			//update(mt);	
		}
System.out.print(".");
end


rule "merged_histogram"
	//salience 99909
	salience 85003
	no-loop true
	when
		$record : MedicalRecord()
		Domain($domainName : domainName)
		$mt : MergedTumor($bodySite : bodySite, $bodySide : bodySide, rulesApplied not contains "merged_histogram") 
	
	then
		modify($mt){addRulesApplied("merged_histogram")};
		//add tumorType
		String tType = "";
		TumorSummary ts = $record.getCancerSummary().getTumorSummaryByIdentifier($mt.getTumorSummaryID());
		List fList = ts.getFacts(FHIRConstants.HAS_TUMOR_TYPE);
		if(!fList.isEmpty()){
			tType = fList.get(0).toString();
		}
		LocationHistogram lh = LocationHistogram.getHist($domainName, $record.getPatientName(), LocationHistogram.MERGED_TUMOR);
		lh.addRow($bodySite, $bodySide, $mt.getTumorSiteFactSet().size(), tType);
		System.out.print(".");
end


rule "write_merged_tumor_histogram"
	//salience 99907
	salience 85001
	no-loop true
	when
		$record : MedicalRecord()
		Domain($domainName : domainName)
		not (String(this == "done_with_merged_tumor_hist"))
	then
		LocationHistogram lh = LocationHistogram.getHist($domainName, $record.getPatientName(), LocationHistogram.MERGED_TUMOR);
		lh.writeAll();
		insert("done_with_merged_tumor_hist");
end

/*
rule "print_unmapped_TumorLocators"
	salience 99910
	no-loop true
	when
		$tl : TumorLocator(readyForRetraction == false, rulesApplied not contains "print_unmapped_TumorLocators")
	then
		modify ($tl) {addRulesApplied("print_unmapped_TumorLocators")}
		System.err.println("NOT Merged:" +$tl.getInfo());
end
*/

rule "remove_parent_facts"
	salience 99809
	//salience 99909
	no-loop true
	when
		$r : toBeRetracted($f : fact)
		$theF : Fact(this == $f)
		
	then
		retract($r);
		retract($theF);
end
 
	
/**
* If there is a Pathology Report, leave only the tumors from PR, remove other - statistics
*/
/*
rule "get-MergedTumor-stats"
 	salience 99555
	no-loop true
	when 
		$mt : MergedTumor(gotStatistics == false)
	then
		//get stats
		$mt.setGotStatistics(true);
//		//System.out.println($mt.getDocStatistics());
//System.out.println("get-MergedTumor-stats");
end 
*/


///**
//* Adds histologic type to Tumor if any
//*/ 

rule "add-histologicType"
  	salience 100000
	no-loop true
	when
		$site_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY,$t_summaryId : summaryId,
							category == FHIRConstants.HAS_HISTOLOGIC_TYPE, $hist_name : name)
		$tl : TumorLocator(tumorSiteFact == $site_tFact, histologicType == "")
	then
		modify($tl){
			setHistologicType($hist_name);
		}
//System.out.println("add-histologicType");
end

//stop here

/*
rule "print-specific-RecordSummary"
	salience 99000
	no-loop true
	when 
		$summaryF : Fact(documentType == FHIRConstants.RECORD_SUMMARY, type == FHIRConstants.TUMOR_SUMMARY, 
			rulesApplied not contains "TEST-print-specific-RecordSummary")
		
	then
		//System.out.println("* RecordSummary: "+$summaryF.getInfo());
		modify($summaryF){addRulesApplied("TEST-print-specific-RecordSummary") } 
end	




rule "print-idMap"
	no-loop true
	when 
		$m :IdMapper()
	then
		//System.out.println("IdMapper oldSummaryId: "+$m.getOldSummaryId()+" newSummaryId: "+$m.getNewSummaryId());
end	


rule "print-Specific-RecordSummary"
	salience 3
	no-loop true
	when 
		$summaryF : Fact(documentType == FHIRConstants.RECORD_SUMMARY, identifier matches ".*TumorSummary.*")
	then
		//System.out.println("* RecordSummary: "+$summaryF.getInfo());
end	
*/
/*
rule "print-specific-RecordSummary"
	salience -3
	no-loop true
	when 
		$summaryF : Fact(documentType == FHIRConstants.RECORD_SUMMARY, $name : name, ($name == "Axilla" || $name == "Axillary_Lymph_Node"))
	then
		//System.out.println("* RecordSummary: "+$summaryF.getInfo());
		List<Fact> provF =  $summaryF.getProvenanceFacts();
		for(Fact f:provF)
		//System.out.println("PRV_FACT: "+f.getInfo());
end	
*/
/*
rule "print-RecordSummary-Modifier"
	salience 2
	no-loop true
	when 
		$summaryF : Fact(documentType == "RecordSummary-Modifier")
	then
		System.out.print("*** RecordSummary-MODIFIER: "+$summaryF.getInfo());
end	




rule "print-BodySite-facts"

	no-loop true
	when 
		Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_BODY_SITE
		$f : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_BODY_SITE,
			 rulesApplied not contains "print-BodySite-facts")

	then
		modify($f){addRulesApplied("print-BodySite-facts") } 
		//System.out.println("*** BodySite: "+$f.getInfo());
end	


rule "print-cancerSummary"
	no-loop true
	when 
		$summaryF : Fact(summaryType == "CancerSummary", documentType == FHIRConstants.RECORD_SUMMARY)
	then
		//System.out.println("* CancerSummary: "+$summaryF.getInfoDrools(true));
end	


rule "print-MergedTumor"
	salience 1
	no-loop true
	when 
		$f : MergedTumor(gotStatistics == false)
	then
		$f.setGotStatistics(true);
		System.out.println("***");
		System.out.println(" MergedTumor: "+$f.getInfo());
end


rule "print-test-CS"
	salience 1
	no-loop true
	when 
		$record : MedicalRecord()
		not (String (this == "print_CS"))
	then
		insert("print_CS");
		System.out.println("\n*********\nCS SUMM in DROOLS: "+$record.getSummaryText()+"\nDONE CS IN DROOLS*********");
end


rule "print-TumorLocators"
	//salience 1
	salience 99998
	no-loop true
	when 
		$f : TumorLocator(rulesApplied not contains "print-TumorLocators")
	then
		//System.out.println("*** TumorLocator: "+$f.getInfo());
		modify($f){addRulesApplied("print-TumorLocators") } 
end		

rule "print-Medical-RecordSummary"
	no-loop true
	when 
		$record : MedicalRecord()
	then
	System.out.print(".");
		System.out.print("PRINT Medical-RecordSummary: "+$record.getSummaryText());
	System.out.print(".");
end
*/
