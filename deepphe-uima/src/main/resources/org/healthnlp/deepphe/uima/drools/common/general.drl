//created on: Feb 16, 2018
package org.healthnlp.deepphe.uima.drools.common


import java.lang.Object;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Iterator;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fact.BodySiteFact;
import org.healthnlp.deepphe.fact.ValueFact;
import org.healthnlp.deepphe.fact.DefaultFactList;
import org.healthnlp.deepphe.fact.Fact;
import org.healthnlp.deepphe.fact.FactFactory;
import org.healthnlp.deepphe.fact.FactHelper;
import org.healthnlp.deepphe.fact.FactList;


import org.healthnlp.deepphe.summary.*;
import org.healthnlp.deepphe.uima.drools.*;


declare idMapperList
	type : String 
	newSummaryId : String   
    oldSummaryIds : Set
end


/**
* sets Diagnosis, histologicType, cancerType
*/

// sets CANCER_TYPE
rule "set-Cancer-CancerType"
	salience 45600
	no-loop true
	when
		$domain : Domain($domainName : domainName)
		$record : MedicalRecord()	
		
		$tTypeF : Fact(documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_CANCER_TYPE,
					$deepName : name)
								    
	    // most specific
	    not(Fact(this != $tTypeF, documentType != FHIRConstants.RECORD_SUMMARY, name != $deepName,
	    		category == FHIRConstants.HAS_CANCER_TYPE, ancestors contains $deepName))
	    
	    $cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, 
					documentType == FHIRConstants.RECORD_SUMMARY)
	    		
	   not(Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, 
					category == FHIRConstants.HAS_CANCER_TYPE, provenanceFacts contains $tTypeF))
	    		
	    //collect all as provenance facts
	    $cTypeFacts : Set()
	    from collect (Fact(documentType != FHIRConstants.RECORD_SUMMARY, 
	    			category == FHIRConstants.HAS_CANCER_TYPE, 
	    			(name == $deepName || ancestors contains $deepName)))
	then
//System.out.println("set-Cancer-CancerType as: "+$tTypeF.getInfoDrools(false)+" sz: "+$cTypeFacts.size()); 
		
		Fact cTypeF = FactFactory.createFact($tTypeF.getType(), $tTypeF.getUri());
		cTypeF.setName(	$tTypeF.getName());
		cTypeF.setUri(	$tTypeF.getUri());
		cTypeF.setLabel($tTypeF.getUri());
		cTypeF.setType($tTypeF.getType());
		cTypeF.setDocumentType(FHIRConstants.RECORD_SUMMARY);
		cTypeF.getAncestors().addAll( $tTypeF.getAncestors() );
		cTypeF.setIdentifier($cancerFact.getIdentifier());
		cTypeF.setCategory(FHIRConstants.HAS_CANCER_TYPE);
		cTypeF.setSummaryType(FHIRConstants.CANCER_SUMMARY );
		cTypeF.setSummaryId($cancerFact.getSummaryId());
		cTypeF.setType(FHIRConstants.CONDITION);
		cTypeF.addRulesApplied("set-Cancer-CancerType");
		
		for(Object obj : $cTypeFacts){
			Fact cF = (Fact)obj;
			cTypeF.addProvenanceFact(cF);
			cTypeF.getAncestors().addAll( cF.getAncestors() );
		}		
		modify($record){
			getCancerSummary().addFact(FHIRConstants.HAS_CANCER_TYPE, cTypeF)
		}	
		insert(cTypeF);
end   


rule "set-Tumor-CancerType"
	salience 45558
	no-loop true
	when
		$domain : Domain($domainName : domainName)
		$record : MedicalRecord()	
	
	    $tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, 
	    	documentType != FHIRConstants.RECORD_SUMMARY, $t_summaryId : summaryId, category == FHIRConstants.HAS_CANCER_TYPE)

	    IdMapper(oldSummaryId == $t_summaryId, $newSummaryId : newSummaryId)
	    $recordTFact : Fact(documentType == FHIRConstants.RECORD_SUMMARY, 
	    			summaryType == FHIRConstants.TUMOR_SUMMARY, summaryId == $newSummaryId)
	    not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, 
	    			category == FHIRConstants.HAS_CANCER_TYPE, provenanceFacts contains $tF))

	    
	then
		//tumor level
	//System.out.println("set-Tumor-CancerType");	
		String newId = "WasTumorPhenotype"+"-"+$newSummaryId;
		Fact tf = FactFactory.createFact($tF, FHIRConstants.CONDITION, $domain.getOntologyURI()+"#"+$tF.getName(), 
				FHIRConstants.RECORD_SUMMARY);
		tf.setIdentifier(newId);
		tf.addContainerIdentifier($newSummaryId);
		tf.addProvenanceFact($tF);
		tf.setSummaryType(FHIRConstants.TUMOR_SUMMARY);
		insert(tf);
		insert(new IdMapper($tF.getIdentifier(), newId, $tF.getSummaryId(), $newSummaryId));
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier($newSummaryId).addFact(FHIRConstants.HAS_CANCER_TYPE, tf)
		}
		
end   


rule  "set-Tumor-HistologicType"
	salience 45557
	no-loop true
	when
		$domain : Domain($domainName : domainName)
		$record : MedicalRecord()	
	
	    $tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
	    			$t_summaryId : summaryId, category == FHIRConstants.HAS_HISTOLOGIC_TYPE, 
	    			rulesApplied not contains "set-Tumor-HistologicType")
	    IdMapper(oldSummaryId == $t_summaryId, $newSummaryId : newSummaryId)
	    $recordTFact : Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, 
	    			summaryId == $newSummaryId)
	    not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, 
	    		category == FHIRConstants.HAS_HISTOLOGIC_TYPE, provenanceFacts contains $tF))
	then
		//tumor level
//System.out.println("set-Tumor-HistologicType");	
		modify( $tF ){	addRulesApplied("set-Tumor-HistologicType") }
		String newId =  "WasTumorPhenotype" +"-"+$newSummaryId;
		Fact tf = FactFactory.createFact($tF, FHIRConstants.CONDITION, $domain.getOntologyURI()+"#"+$tF.getName(), 
					FHIRConstants.RECORD_SUMMARY);
		tf.setIdentifier(newId);
		tf.addContainerIdentifier($newSummaryId);
		tf.addProvenanceFact($tF);
		tf.setSummaryType(FHIRConstants.TUMOR_SUMMARY);
		insert(tf);
		insert(new IdMapper($tF.getIdentifier(), newId, $tF.getSummaryId(), $newSummaryId));
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier($newSummaryId).addFact(FHIRConstants.HAS_HISTOLOGIC_TYPE, tf)
		}
		
end   

//There is no Cancer histologic type in V2
/*
rule  "set-Cancer-HistologicType"
	salience 45556
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, 
			$cSummary_id : summaryId)
   		Fact(summaryType==FHIRConstants.CANCER_SUMMARY , documentType != FHIRConstants.RECORD_SUMMARY, 
   					category == FHIRConstants.HAS_HISTOLOGIC_TYPE)
	    not(Fact(summaryType==FHIRConstants.CANCER_SUMMARY , documentType == FHIRConstants.RECORD_SUMMARY, 
	    		category == FHIRConstants.HAS_HISTOLOGIC_TYPE))	
	    
	    $cHistFacts : Set()
	    from collect (Fact(summaryType==FHIRConstants.CANCER_SUMMARY , 
	    	documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_HISTOLOGIC_TYPE))
	    
	then
		for(Object obj : $cHistFacts){
			Fact cF = (Fact)obj;
			Fact ctf = FactFactory.createFact(cF, FHIRConstants.HAS_HISTOLOGIC_TYPE, $domain.getOntologyURI()+"#"+cF.getName(), FHIRConstants.RECORD_SUMMARY);
			ctf.setIdentifier($cancerFact.getIdentifier());
			ctf.addProvenanceFact(cF);
			//ctf.getContainerIdentifier().clear();
			//ctf.addContainerIdentifier($cSummary_id);
			ctf.setSummaryType(FHIRConstants.CANCER_SUMMARY );
			ctf.setSummaryId($cSummary_id);
			
			FactHelper.addFactToSummary(ctf, $record.getCancerSummary(), $cancerFact.getIdentifier(), $domain.getOntologyURI());
			insert(ctf);
		}

end  
*/

// leave it here since next rule is missing body location without it. WHY?
rule  "TEST-set-Tumor-Diagnosis"
	salience 44445
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		
		$tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
			category == FHIRConstants.HAS_DIAGNOSIS, $deepName : name, $deepName != "Lesion", 
			$deepOldSummaryId : summaryId, rulesApplied not contains "TEST-set-Tumor-Diagnosis")
	    $idM : IdMapper(oldSummaryId == $deepOldSummaryId, $newSummaryId : newSummaryId, rulesApplied not contains "TEST-set-Tumor-Diagnosis")
	    
	    // most specific
	    not((Fact(this != $tF, summaryType == FHIRConstants.TUMOR_SUMMARY, 
	    		documentType != FHIRConstants.RECORD_SUMMARY, name != $deepName,
	    		category == FHIRConstants.HAS_DIAGNOSIS, 
	    		ancestors contains $deepName, $oldSummaryId : summaryId)
	    	&& IdMapper(oldSummaryId == $oldSummaryId, newSummaryId == $newSummaryId )	    		
	    	))
	then
		modify($tF){	addRulesApplied("TEST-set-Tumor-Diagnosis") }
		modify($idM){	addRulesApplied("TEST-set-Tumor-Diagnosis") }
////System.out.println("\nDiagnosis: "+$deepName+" oldID: "+	$deepOldSummaryId+" newID: "+	$newSummaryId);

end


/*
* Sets the most specific tumor diagnosis across documents. Lesion is not a diagnosis.
*/
rule  "set-Tumor-Diagnosis"
	salience 44444
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		
		$tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
					category == FHIRConstants.HAS_DIAGNOSIS, $deepName : name, //$deepName != "Lesion", 
					$deepOldSummaryId : summaryId, $tf_ancestors : ancestors)
					
		$mt: MergedTumor($tumorSummaryIdSet : tumorSummaryIdSet, $tumorSummaryIdSet contains $deepOldSummaryId, 
					diagnosisFactSet not contains $tF)				
	    // most specific
	    not((Fact(this != $tF, summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY,
	    		category == FHIRConstants.HAS_DIAGNOSIS, name != $deepName,
	    		ancestors contains $deepName, $oldSummaryId : summaryId, //rulesApplied not contains "set-Tumor-Diagnosis",
	    		$tumorSummaryIdSet contains $oldSummaryId)    		
	    	))
    	
	     // get all parent diagnoses
	    $parentDiagnSet : Set()
	    from collect (Fact(this != $tF, summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
	    			category == FHIRConstants.HAS_DIAGNOSIS, $tf_ancestors contains name,
	    			$tumorSummaryIdSet contains summaryId))//, rulesApplied not contains "set-Tumor-Diagnosis"))
	
	then
		Fact tf = FactFactory.createFact($tF, FHIRConstants.HAS_DIAGNOSIS, $domain.getOntologyURI()+"#"+$deepName, 
				FHIRConstants.RECORD_SUMMARY);
		String newSummaryId = $mt.getTumorSummaryID();
//System.out.println(" *** set-Tumor-Diagnosis to "+$deepName+" site: "+$mt.getBodySite());
		tf.addContainerIdentifier(newSummaryId);
		tf.setIdentifier(tf.getName()+"-"+newSummaryId);
		tf.setSummaryId(newSummaryId);
		tf.addProvenanceFact($tF);
		tf.addRulesApplied("set-Tumor-Diagnosis");
		$mt.getDiagnosisFactSet().add($tF);
			
		for (Object obj: $parentDiagnSet){
			Fact diagnFact = (Fact)obj;
//System.out.println("set-Tumor-Diagnosis PARENT: "+diagnFact.getName());

			tf.addProvenanceFact(diagnFact);
			$mt.getDiagnosisFactSet().add(diagnFact);
			insert(new IdMapper(diagnFact.getIdentifier(), tf.getIdentifier(), diagnFact.getSummaryId(), tf.getSummaryId()));
		}
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newSummaryId, $domain.getOntologyURI());
		insert(tf);
		
end 


/*
* Sets the most specific tumor diagnosis across documents. Lesion is not a diagnosis.
*/
rule  "set-Tumor-Calcification"
	salience 44440
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		
		$tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
			category == FHIRConstants.HAS_CALCIFICATION, $deepName : name, $deepOldSummaryId : summaryId)
	    $idM : IdMapper(oldSummaryId == $deepOldSummaryId, $newSummaryId : newSummaryId, 
	    	rulesApplied not contains "set-Tumor-Calcification")
	    // most specific
	    not((Fact(this != $tF, summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY,
	    		category == FHIRConstants.HAS_CALCIFICATION, name != $deepName,
	    		ancestors contains $deepName, $oldSummaryId : summaryId)
	    	&& IdMapper(oldSummaryId == $oldSummaryId, newSummaryId == $newSummaryId )	    		
	    	))
	    	
	    $recordTFact : Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, 
	    	summaryId == $newSummaryId)
	    not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, 
	    	category == FHIRConstants.HAS_CALCIFICATION, provenanceFacts contains $tF))
	    
	    $deepOldSummaryIdSet : Set()
	    from collect (Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
	    	category == FHIRConstants.HAS_CALCIFICATION, 
	    	name == $deepName, summaryId == $deepOldSummaryId, rulesApplied not contains "set-Tumor-Calcification"))

	then
	//System.out.println("set-Tumor-calcification");	
		modify($idM){	addRulesApplied("set-Tumor-Calcification") }
		if($deepOldSummaryIdSet.size() > 0) {
			
			Fact tf = FactFactory.createFact($tF, FHIRConstants.HAS_CALCIFICATION, $domain.getOntologyURI()+"#"+$deepName, 
			FHIRConstants.RECORD_SUMMARY);
////System.out.println("set-Tumor-HAS_CALCIFICATION to "+$deepName+" $newSummaryId: "+$newSummaryId);
			tf.addContainerIdentifier($newSummaryId);
			tf.setIdentifier(tf.getName()+"-"+$newSummaryId);
			tf.setSummaryId($newSummaryId);
			
			for (Object obj: $deepOldSummaryIdSet){
				Fact diagnFact = (Fact)obj;
				modify(diagnFact){	addRulesApplied("set-Tumor-Calcification") }
				tf.addProvenanceFact(diagnFact);
				insert(new IdMapper(diagnFact.getIdentifier(), tf.getIdentifier(), diagnFact.getSummaryId(), tf.getSummaryId()));
			}
			FactHelper.addFactToSummary(tf, $record.getCancerSummary(), $newSummaryId, $domain.getOntologyURI());
			insert(tf);
	}		
end 
    

/*
* Set size for tumor with diagnosis
*/
rule "set-Tumor-Size"
	salience 44430
	no-loop true
	when
		$record : MedicalRecord()
		
		$vF : ValueFact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY,
			name == FHIRConstants.TUMOR_SIZE, $t_summaryId : summaryId)
			
		$mt : MergedTumor(tumorSummaryIdSet contains $t_summaryId, sizeFactSet not contains $vF)

	then
	//System.out.println("set-Tumor-Size");
//System.out.println("***FOUND : valL :"+$vF.getValueString()+" id: "+$t_summaryId);
//System.out.println("getSummaryText: "+$vF.getSummaryText());
		

		$mt.getSizeFactSet().add($vF);
		
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier($mt.getTumorSummaryID()).addFact(FHIRConstants.TUMOR_SIZE, $vF)
		}
System.out.print(".");
end



rule  "set-Tumor-TumorExtent"
	salience 45555
	no-loop true
	when
		$domain : Domain($domainName : domainName)
		$record : MedicalRecord()		
	    $tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
	    			$t_summaryId : summaryId, category == FHIRConstants.HAS_TUMOR_EXTENT, 
	    			rulesApplied not contains "setTumorExtent")

	    IdMapper(oldSummaryId == $t_summaryId, $newSummaryId : newSummaryId)
	    
	    $recordTFact : Fact(documentType == FHIRConstants.RECORD_SUMMARY, 
	    		summaryType == FHIRConstants.TUMOR_SUMMARY, summaryId == $newSummaryId)
	    		
	    not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, 
	    		category == FHIRConstants.HAS_TUMOR_EXTENT, provenanceFacts contains $tF))	
	    		
	        
	then
	//System.out.println("TumorExtent $tF name: "+$tF.getInfoDrools(false));
		modify($tF){	addRulesApplied("setTumorExtent") }
		//tumor level
		
		String newId = "WasTumorPhenotype" +"-"+$newSummaryId;
		Fact tf = FactFactory.createFact($tF, FHIRConstants.CONDITION, $domain.getOntologyURI()+"#"+$tF.getName(), 
					FHIRConstants.RECORD_SUMMARY);
		tf.setIdentifier(newId);
		tf.addContainerIdentifier($newSummaryId);
		tf.addProvenanceFact($tF);
		tf.setSummaryType(FHIRConstants.TUMOR_SUMMARY);
		insert(tf);
		insert(new IdMapper($tF.getIdentifier(), newId, $tF.getSummaryId(), $newSummaryId));
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier($newSummaryId).addFact(FHIRConstants.HAS_TUMOR_EXTENT, tf)
		}
		System.out.print(".");
end   


//No tumor extent on cancer level in V2
/*
rule  "set-Cancer-TumorExtent"
	salience 45554
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, $cSummary_id : summaryId)
   		Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_TUMOR_EXTENT)
	    not(Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType == FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_TUMOR_EXTENT))	
	    
	    $cHistFacts : Set()
	    from collect (Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_TUMOR_EXTENT))
	    
	then
		for(Object obj : $cHistFacts){
			Fact cF = (Fact)obj;
			Fact ctf = FactFactory.createFact(cF, FHIRConstants.HAS_TUMOR_EXTENT, $domain.getOntologyURI()+"#"+cF.getName(), FHIRConstants.RECORD_SUMMARY);
			ctf.setIdentifier($cancerFact.getIdentifier());
			ctf.addProvenanceFact(cF);
			ctf.getContainerIdentifier().clear();
			ctf.addContainerIdentifier($cSummary_id);
			ctf.setSummaryType(FHIRConstants.CANCER_PHENOTYPE );
			ctf.setSummaryId(FHIRConstants.CANCER_PHENOTYPE +"-"+$cSummary_id);
			
			FactHelper.addFactToSummary(ctf, $record.getCancerSummary(), $cancerFact.getIdentifier(), $domain.getOntologyURI());
			insert(ctf);
		}
end
*/

/**
* Only Primary tumor locations should be present in the CancerSummary
* Should run AFTER the tumors from PR for ant domain
*/
rule "retract-non-PR-tumors-from-CS"
	salience 2
	no-loop true
	when
		$record : MedicalRecord()
      	$not_pRTumors : Set()
      	from collect( Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY,
														category == FHIRConstants.HAS_TUMOR_TYPE, $name: name, 
														$name != FHIRConstants.PRIMARY_TUMOR,
														rulesApplied not contains "retract-non-PR-tumors-from-CS"))
	then
	////System.out.println("retract-non-PR-tumors-from-CS");
		FactList cancerBS = $record.getCancerSummary().getBodySite();
		for(Object obj_f : $not_pRTumors){
			Fact ff = (Fact)obj_f;
			modify (ff){	addRulesApplied("retract-non-PR-tumors-from-CS") }
			TumorSummary ts = $record.getCancerSummary().getTumorSummaryByIdentifier(ff.getSummaryId());
			cancerBS.removeAll(ts.getBodySite());
		}
end

		
/*
* In presence of PR report retract any tumor without PR reports
*/
/*
rule "retract-non-PR-tumors-BRCA"
	salience 4
		no-loop true
		when
			$record : MedicalRecord()
			Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)
			MergedTumor(fromPathologyReport == true, checkedForPR == false)
			$allTumors : Set()
      		from collect( MergedTumor(checkedForPR == false))
	then

		for(Object obj : $allTumors){
			MergedTumor mt = (MergedTumor)obj;
////System.out.println(mt.getDocStatistics());
			if(!mt.isFromPathologyReport()){
////System.out.println("****** retract-non-PR-tumors REMOVE "+mt.getMergedTumorId());
				mt.setCheckedForPR(true);
				TumorSummary tss = $record.getCancerSummary().getTumorSummaryByIdentifier(FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId());
////System.out.println("RETRACT TS: "+tss.getResourceIdentifier());
				modify($record){
					getCancerSummary().removeTumor(tss)
				}
			}
		}
end
*/

/*
* In absence of PR report all tumors should stay
*/
/*
rule "no-tumor-retraction-just-info"
	salience 3
		no-loop true
		when
			$record : MedicalRecord()
			not(MergedTumor(fromPathologyReport == true, checkedForPR == false))
			$allTumors : Set()
      		from collect( MergedTumor(checkedForPR == false))
	then
		//get stats
		for(Object obj : $allTumors){
			MergedTumor mt = (MergedTumor)obj;
////System.out.println("***** no-tumor-retraction-just-info NO REMOVE "+mt.getMergedTumorId());
			mt.setFromPathologyReport(true);
			mt.setCheckedForPR(true);
////System.out.println(mt.getDocStatistics());
		}
end
*/

	   
/*
* Remove all tumors from CS without any contained facts
* Can't move it into CS - many Tumors are not in CS by that time WITHOUT this rule (???)
*/
rule "remove_empty_tumors"
	no-loop true
	when 
		$record : MedicalRecord()
		not (String (this == "removed_empty_tumors"))
	then
	//System.out.println("removed_empty_tumors");
		insert("removed_empty_tumors");		
		List<TumorSummary> tsList =  $record.getCancerSummary().getTumors();
		for (Iterator<TumorSummary> iterator = tsList.iterator(); iterator.hasNext();) {
    		TumorSummary ts = iterator.next();
   
			if(ts.getContainedFacts().size() == 0){
	System.out.println("about to removed_empty_tumors ts: "+ts);
				iterator.remove();
			}
		}		
end	

//This summarization happens AFTER Drools
/*
rule "remove-CS-locations-no-diagnosis"
	no-loop true
	when
		$record : MedicalRecord()	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, 
		documentType == FHIRConstants.RECORD_SUMMARY, $summaryId : summaryId, 
		rulesApplied not contains "remove-CS-locations-no-diagnosis")
		not(Fact(summaryType==FHIRConstants.CANCER_SUMMARY, 
		category == FHIRConstants.HAS_DIAGNOSIS, documentType == FHIRConstants.RECORD_SUMMARY))
	then
		modify($cancerFact){	addRulesApplied("remove-CS-locations-no-diagnosis") }
		FactList bs = $record.getCancerSummary().getBodySite();
//System.out.println("remove-CS-locations-no-diagnosis: sz :"+bs.size());
		for(Fact f: bs)
			//System.out.println("RRR: "+f.getInfoDrools(false));			
end
*/				
		