package org.healthnlp.deepphe.uima.drools;

import java.lang.Object;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.UUID;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fhir.fact.Fact;
import org.healthnlp.deepphe.fhir.fact.BodySiteFact;
import org.healthnlp.deepphe.fhir.fact.FactFactory;
import org.healthnlp.deepphe.fhir.fact.FactHelper;

import org.healthnlp.deepphe.fhir.summary.*;
import org.healthnlp.deepphe.uima.drools.*;


/*
* Lesion is not a diagnosis - retract it
*/
/*
rule "retract-lesion"
	salience 100000003
	no-loop true
	when
		$f : Fact(category == FHIRConstants.HAS_DIAGNOSIS, name == "Lesion")
	then
System.out.println("RRREE: "+$f.getInfoDrools());
		retract($f);
end
*/
/*
* Retract all document level Cancer Summary/Phenotype without bodySite
* ATTENTION: DO NOT replace "CancerSummary" with FHIRConstants.CANCER_SUMMARY in this rule - it won't work for unknown reason
*/
rule "retract-CS"
	salience 100000002
	no-loop true
	when
		$cFact : Fact(summaryType == "CancerSummary", documentType != FHIRConstants.RECORD_SUMMARY, category != FHIRConstants.HAS_BODY_SITE, $cSummaryId : summaryId)
		not(Fact(this != $cFact, summaryType == FHIRConstants.CANCER_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, documentType != FHIRConstants.RECORD_SUMMARY,
						summaryId==$cSummaryId))
		
		$cSumm : Set()
		from collect (Fact (summaryType == FHIRConstants.CANCER_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, summaryId==$cSummaryId))
		$cPhe : Set() 
		from collect(Fact (summaryType == FHIRConstants.CANCER_PHENOTYPE , documentType != FHIRConstants.RECORD_SUMMARY, containerIdentifier contains $cSummaryId))
		then
		
			for(Object obj : $cSumm){
System.out.println("retract-CS cSumm F: "+((Fact)obj).getInfoDrools());
				retract((Fact)obj);

			}
			for(Object obj : $cPhe){
System.out.println("retract-CS cPhe F: "+((Fact)obj).getInfoDrools());
				retract((Fact)obj);
			}
end

/*
* Retract all document level Tumor Summary/Phenotype without bodySite
*/
rule "retract-TS"
	salience 100000001
	no-loop true
	when
		$cFact : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, category != FHIRConstants.HAS_BODY_SITE, 
			$cSummaryId : summaryId)
		not(Fact(this != $cFact, summaryType == FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, documentType != FHIRConstants.RECORD_SUMMARY,
						summaryId==$cSummaryId))
		
		$cSumm : Set()
		from collect (Fact (summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, summaryId==$cSummaryId))
		$cPhe : Set() 
		from collect(Fact (summaryType == FHIRConstants.TUMOR_PHENOTYPE, documentType != FHIRConstants.RECORD_SUMMARY, containerIdentifier contains $cSummaryId))
		then
			for(Object obj : $cSumm){
System.out.println("retract-TTTS tSum F: "+((Fact)obj).getInfoDrools());
				retract((Fact)obj);
			}
			for(Object obj : $cPhe){	
System.out.println("retract-TTTS tPhe F: "+((Fact)obj).getInfoDrools());	
				retract((Fact)obj);
			}
end
		

/*
* Add Breast BodySite to CancerSummary if exists
* use a bit higher salience than for Tumors
*/
rule "addCreateCancerSummary"
	salience 1000003
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)
		$cFact : BodySiteFact(summaryType == FHIRConstants.CANCER_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
					 category == FHIRConstants.HAS_BODY_SITE, $cancer_bs_name : name, $cancerId : identifier, $patientId : patientIdentifier, $cSummaryId : summaryId,
					$cancer_ancestors: ancestors//, ($cancer_bs_name==$domainName || $cancer_ancestors contains $domainName)
					)
		not(Fact(this != $cFact, summaryType == FHIRConstants.CANCER_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, documentType == FHIRConstants.RECORD_SUMMARY,
						patientIdentifier==$patientId))
		not(IdMapper (oldId == $cancerId, oldSummaryId == $cSummaryId))
	   
	then
		String newId = FHIRConstants.CANCER_SUMMARY +"-"+$domainName;
		Fact cf = FactFactory.createFact($cFact, $cFact.getType(), $domain.getOntologyURI()+"#"+FHIRConstants.DOMAIN_BREAST, FHIRConstants.RECORD_SUMMARY);
		cf.setIdentifier(newId);
		cf.addProvenanceFact($cFact);
		cf.setSummaryId(newId);
		modify($record) {
			getCancerSummary().setResourceIdentifier(newId)
		}
		insert(cf);
		insert(new IdMapper($cancerId, newId, $cFact.getDocumentType(), $cFact.getSummaryId(), cf.getSummaryId()));
		//FactHelper.addFactToSummary($cFact, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
//System.out.print("in 	addCreateCancerSummary");	
		
		System.out.print(".");
end
/*
* Same as addCreateCancerSummary, but without creation creation here
*/
rule "addOtherToCancerSummary"
	salience 1000002
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)
		$cFact : BodySiteFact(summaryType == FHIRConstants.CANCER_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
					 category == FHIRConstants.HAS_BODY_SITE, $cancer_bs_name : name, $cancerId : identifier, $patientId : patientIdentifier,
					$cSummaryId : summaryId//, $cancer_ancestors: ancestors, ($cancer_bs_name==$domainName || $cancer_ancestors contains $domainName)
					)
		$summaryFact : Fact(summaryType == FHIRConstants.CANCER_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, documentType == FHIRConstants.RECORD_SUMMARY, $documentType : documentType,
						patientIdentifier==$patientId, $newId : identifier)
		not(IdMapper (oldId == $cancerId, oldSummaryId == $cSummaryId))
	then	
		$summaryFact.addProvenanceFact($cFact);

		insert(new IdMapper($cancerId, $newId, $cFact.getDocumentType(), $cSummaryId, $summaryFact.getSummaryId()));
//System.out.print("in 	addOtherToCancerSummary");	
		System.out.print(".");
end





/**
* Considering that for each tumorID could not be more than one side, Qadrant or clockFacePos
* run once
*/
rule "collect_locations"
	salience 99999
	no-loop true
	when	
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)
		$cSummaryFact : Fact(summaryType == FHIRConstants.CANCER_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, documentType == FHIRConstants.RECORD_SUMMARY, 
			$cancerSummaryId : summaryId)
		$tumor1_f : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, documentType != FHIRConstants.RECORD_SUMMARY, 
				$patientId : patientIdentifier, $tumor1_identifier : identifier, $tumor1_name : name, $tSummaryId : summaryId)
		not(TumorLocator( docTumorId == $tSummaryId))
		
		$sideMap : Map()
		from accumulate ( $fact : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, 
							containerIdentifier contains $tumor1_identifier, $modifName : name, type ==FHIRConstants.LATERALITY),
			init( HashMap mm = new HashMap(); ),
			action( if(mm.get($modifName) == null) mm.put($modifName, new ArrayList());
			((List)mm.get($modifName)).add($fact); ),
            reverse ( ((List)mm.get($modifName)).remove($fact); ), 
        	result( mm ) ) 
        
       $quadMap : Map()	
        from accumulate ( $fact : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, 
							containerIdentifier contains $tumor1_identifier, $modifName : name, ancestors contains FHIRConstants.QUADRANT),
			init( HashMap qm = new HashMap(); ),
			action( if(qm.get($modifName) == null) qm.put($modifName, new ArrayList());
			((List)qm.get($modifName)).add($fact); ),
            reverse ( ((List)qm.get($modifName)).remove($fact); ), 
        	result( qm ) ) 	
        	
        $clockMap : Map()	
        from accumulate ( $fact : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, 
							containerIdentifier contains $tumor1_identifier, $modifName : name, ancestors contains FHIRConstants.CLOCKFACE_POSITION),
			init( HashMap cm = new HashMap(); ),
			action( if(cm.get($modifName) == null) cm.put($modifName, new ArrayList());
			((List)cm.get($modifName)).add($fact); ),
            reverse ( ((List)cm.get($modifName)).remove($fact); ), 
        	result( cm ) )
        
        then
 //System.out.println("collect_locations START: $sideMap.size(): "+$sideMap.size()+" $quadMap.size(): "+$quadMap.size()+" $clockMap.size(): "+$clockMap.size());
 //System.out.println("collect_locations $tumor1_f :"+$tumor1_f.getInfo());
 System.out.print(".");    	
  			if($sideMap.size() == 0 && $quadMap.size() == 0 && $clockMap.size() == 0){
  				TumorLocator tl = new TumorLocator();
				tl.setTumorSiteFact($tumor1_f);
				tl.setDocTumorId($tSummaryId);
				tl.setBodySite($tumor1_name);
				tl.setDocType($tumor1_f.getDocumentType());
				insert(tl);
  			}
  			else 
  			if($sideMap.size() == 1){
  				String firstSideKey = (String)$sideMap.keySet().iterator().next();
  				Fact sideF = (Fact)((List)$sideMap.get(firstSideKey)).get(0);
  				String sideName = sideF.getName();
  				if($quadMap.size() > 0 && $clockMap.size() == 0){
  					for(Object key : $quadMap.keySet()){
						List listObj = (List)$quadMap.get(key);
						for(Object ff:listObj){
							TumorLocator tl = new TumorLocator();
							tl.setTumorSiteFact($tumor1_f);
							tl.setDocTumorId($tSummaryId);
							tl.setBodySite($tumor1_name);
							tl.setQuadrant((String)key);
							tl.setQuadrantFact((Fact)ff);
							tl.setBodySide(sideName);
							tl.setBodySideFact(sideF);
							tl.setDocType(((Fact)ff).getDocumentType());
							insert(tl);
						}
					}
  				}
  				else if($quadMap.size() == 0 && $clockMap.size() > 0){
  					for(Object key : $clockMap.keySet()){
						List listObj = (List)$clockMap.get(key);
						for(Object ff:listObj){
							TumorLocator tl = new TumorLocator();
							tl.setTumorSiteFact($tumor1_f);
							tl.setDocTumorId($tSummaryId);
							tl.setBodySite($tumor1_name);
							tl.setClockFacePos((String)key);
							tl.setClockfacePosFact((Fact)ff);
							tl.setBodySide(sideName);
							tl.setBodySideFact(sideF);
							tl.setDocType(((Fact)ff).getDocumentType());
							String inferredQ = TumorLocator.normalizeQuadrant(sideName, (String)key);
							
							//int listSz = inferredQList.size();
							if(!"".equals(inferredQ))
								tl.setQuadrant(inferredQ);
							insert(tl);
						}
					}
  				}
  				else if($quadMap.size() > 0 && $clockMap.size() > 0){
  				
  					for(Object qkey : $quadMap.keySet()){
						List qObj = (List)$quadMap.get(qkey);
						for(Object ff:qObj){
							TumorLocator tl = new TumorLocator();
							tl.setTumorSiteFact($tumor1_f);
							tl.setDocTumorId($tSummaryId);
							tl.setBodySite($tumor1_name);
							tl.setQuadrant((String)qkey);
							tl.setQuadrantFact((Fact)ff);
							tl.setBodySide(sideName);
							tl.setBodySideFact(sideF);
							tl.setDocType(((Fact)ff).getDocumentType());
							
							for(Object ckey : $clockMap.keySet()){
								List cObj = (List)$clockMap.get(ckey);
								for(Object cf:cObj){
//System.out.println("sideName: "+sideName+" clock : "+ckey+" quad: "+qkey+"  ? "+TumorLocator.clockFactInQuadrant(sideName, (String)ckey, (String)qkey));
									if(TumorLocator.clockFactInQuadrant(sideName, (String)ckey, (String)qkey)){
										if(tl.getClockfacePosFact() == null){
											tl.setClockFacePos((String)ckey);
											tl.setClockfacePosFact((Fact)cf);
		
										}
										else{
										//create new tl
										TumorLocator tli = new TumorLocator();
										tli.setTumorSiteFact($tumor1_f);
										tli.setDocTumorId($tSummaryId);
										tli.setBodySite($tumor1_name);
										tli.setQuadrant((String)qkey);
										tli.setQuadrantFact((Fact)ff);
										tli.setBodySide(sideName);
										tli.setBodySideFact(sideF);
										tli.setClockFacePos((String)ckey);
										tli.setClockfacePosFact((Fact)cf);
										tl.setDocType(((Fact)ff).getDocumentType());
										insert(tli);
									}
								}
							}
						}// for(Object ckey : $clockMap.keySet())

						insert(tl);

System.out.print(".");
						}
					}
  				}
  				else{
  					for(Object key : $sideMap.keySet()){
						List listObj = (List)$sideMap.get(key);
						for(Object ff:listObj){
							TumorLocator tl = new TumorLocator();
							tl.setTumorSiteFact($tumor1_f);
							tl.setDocTumorId($tSummaryId);
							tl.setBodySite($tumor1_name);
							tl.setBodySide((String)key);
							tl.setBodySideFact((Fact)ff);
							tl.setDocType(((Fact)ff).getDocumentType());
							insert(tl);
						}
					}
  				}
  				
  			}
  			else{
	        //$sideMap
	        	for(Object key : $sideMap.keySet()){
					List listObj = (List)$sideMap.get(key);
					for(Object ff:listObj){
						TumorLocator tl = new TumorLocator();
						tl.setTumorSiteFact($tumor1_f);
						tl.setDocTumorId($tSummaryId);
						tl.setBodySite($tumor1_name);
						tl.setBodySide((String)key);
						tl.setBodySideFact((Fact)ff);
						tl.setDocType(((Fact)ff).getDocumentType());
						insert(tl);
					}
				}
			//$quadMap	
				for(Object key : $quadMap.keySet()){
					List listObj = (List)$quadMap.get(key);
					for(Object ff:listObj){
						TumorLocator tl = new TumorLocator();
						tl.setTumorSiteFact($tumor1_f);
						tl.setDocTumorId($tSummaryId);
						tl.setBodySite($tumor1_name);
						tl.setQuadrant((String)key);
						tl.setQuadrantFact((Fact)ff);
						tl.setDocType(((Fact)ff).getDocumentType());
						insert(tl);
					}
				}
			//$clockMap	
				for(Object key : $clockMap.keySet()){
					List listObj = (List)$clockMap.get(key);
					for(Object ff:listObj){
						TumorLocator tl = new TumorLocator();
						tl.setTumorSiteFact($tumor1_f);
						tl.setDocTumorId($tSummaryId);
						tl.setBodySite($tumor1_name);
						tl.setClockFacePos((String)key);
						tl.setClockfacePosFact((Fact)ff);
						tl.setDocType(((Fact)ff).getDocumentType());
						insert(tl);
					}
				}
			}
System.out.print(".");
  end
  
/* ++++++++++++++++++++++++++++++
* GENERAL merge parent locations into child if: 
* (1) {parent.bodySite & parent.bodySide}.size = 1 & {child.bodySite & child.bodySide}.size=1 for the same bodySite, bodySide
* (2) {parent_bodySite}.size = 1 & NO parent_bodySide & {child.bodySite}.soze=1 & {child.bodiSide}.soze=1 // only one child on only one body side
* +++++++++++++++++++++++++++++++*/ 

  /*
* If only one child node involved on the same site/side, merge into child
*/
rule "merge-parent-to-child-each-with-side"
	salience 99909
	no-loop true
	when	
		
		$parent_fact  : TumorLocator($parent_bodySite : bodySite, $parent_bodySite != "", $parent_bodySide : bodySide, $parent_bodySide != "",
						 readyForRetraction == false)
		$child_fact  : TumorLocator($child_bodySite : bodySite, bodySiteAnsestors contains $parent_bodySite, bodySide == $parent_bodySide, 
						 readyForRetraction == false)
	     
	    not(TumorLocator(bodySite != $child_bodySite, bodySiteAnsestors contains $parent_bodySite, bodySide == $parent_bodySide, 
						 readyForRetraction == false))
	
		$sameChildTumors : Set()
      	from collect(TumorLocator(bodySite == $child_bodySite, bodySide == $parent_bodySide, readyForRetraction == false, bodySiteAnsestors contains $parent_bodySite))
        not(MergedTumor (tumorSiteFactSet contains $child_fact.getTumorSiteFact()))  
        
        $sameParentTumors : Set()
      	from collect(TumorLocator(bodySite == $parent_bodySite, bodySide == $parent_bodySide, readyForRetraction == false))
        
	then
		MergedTumor mt = new MergedTumor();
		mt.setBodySite($child_bodySite);
		mt.setBodySide($parent_bodySide);
		 	
		String hystType = "";
		//child
		for(Object tObj : $sameChildTumors){
		 	TumorLocator tl = (TumorLocator)tObj;
		 	//mt.addToDocumentTypeMap(tl.getDocType(), tl.getDocTumorId());		
		 		
		 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
		 		hystType = tl.getHistologicType();
		 		mt.setHistologicType(hystType);
		 	}
		 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
		 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
	 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
	 		
	 		if(tl.getBodySideFact() != null){
			 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
			 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 	}
		 	if(	tl.getQuadrantFact() != null){
			 	mt.addTumorFact(FHIRConstants.QUADRANT, tl.getQuadrantFact());
			 	insert(new IdMapper(tl.getQuadrantFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getQuadrantFact().getDocumentType(), tl.getQuadrantFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 		}		
			if(tl.getClockfacePosFact() != null){ 	
			 	mt.addTumorFact(FHIRConstants.CLOCKFACE_POSITION, tl.getClockfacePosFact());
			 	insert(new IdMapper(tl.getClockfacePosFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getClockfacePosFact().getDocumentType(), tl.getClockfacePosFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 }
	 	
		 	tl.setReadyForRetraction(true);
			update (tl);
System.out.print(".");
		}
		//parent
		for(Object tObj : $sameParentTumors){
		 	TumorLocator tl = (TumorLocator)tObj;		
		 		
		 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
		 		hystType = tl.getHistologicType();
		 		mt.setHistologicType(hystType);
		 	}
		 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
		 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
	 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
	 		
	 		if(tl.getBodySideFact() != null){
			 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
			 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 	}
		 	if(	tl.getQuadrantFact() != null){
			 	mt.addTumorFact(FHIRConstants.QUADRANT, tl.getQuadrantFact());
			 	insert(new IdMapper(tl.getQuadrantFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getQuadrantFact().getDocumentType(), tl.getQuadrantFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 		}		
			if(tl.getClockfacePosFact() != null){ 	
			 	mt.addTumorFact(FHIRConstants.CLOCKFACE_POSITION, tl.getClockfacePosFact());
			 	insert(new IdMapper(tl.getClockfacePosFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getClockfacePosFact().getDocumentType(), tl.getClockfacePosFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 }
	 	
		 	tl.setReadyForRetraction(true);
			update (tl);
System.out.print(".");
		}
		
			insert(mt);

end

rule "merge-parent-no-side"
	salience 99884
	no-loop true
	when	
		
		$parent_fact  : TumorLocator($parent_bodySite : bodySite, $parent_bodySite != "", bodySide == "",
						 quadrant == "", clockFacePos == "", readyForRetraction == false)
		not (TumorLocator(bodySite == $parent_bodySite, $parent_bodySite != "", bodySide != "",
						 quadrant == "", clockFacePos == "", readyForRetraction == false))				 
		$child_fact  : TumorLocator($child_bodySite : bodySite, bodySiteAnsestors contains $parent_bodySite, $child_bodySide : bodySide, $child_bodySide !="",
						 quadrant == "", clockFacePos == "", readyForRetraction == false)
	     
	    not(TumorLocator(bodySite != $child_bodySite, bodySiteAnsestors contains $parent_bodySite, 
						 quadrant == "", clockFacePos == "", readyForRetraction == false))
	
		$sameChildTumors : Set()
      	from collect(TumorLocator(bodySite == $child_bodySite, bodySide == $child_bodySide, clockFacePos == "",
      				quadrant == "", readyForRetraction == false, bodySiteAnsestors contains $parent_bodySite))
        not(MergedTumor (tumorSiteFactSet contains $child_fact.getTumorSiteFact()))  
        
        $sameParentTumors : Set()
      	from collect(TumorLocator(bodySite == $parent_bodySite, bodySide == "", clockFacePos == "",
      				quadrant == "", readyForRetraction == false))
        
	then
		MergedTumor mt = new MergedTumor();
		mt.setBodySite($child_bodySite);
		mt.setBodySide($child_bodySide);
		 	
		String hystType = "";
		//child
		for(Object tObj : $sameChildTumors){
		 	TumorLocator tl = (TumorLocator)tObj;
		 	//mt.addToDocumentTypeMap(tl.getDocType(), tl.getDocTumorId());		
		 		
		 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
		 		hystType = tl.getHistologicType();
		 		mt.setHistologicType(hystType);
		 	}
		 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
		 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
	 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
	 		
	 		if(tl.getBodySideFact() != null){
			 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
			 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 	}
	 	
		 	tl.setReadyForRetraction(true);
			update (tl);
System.out.print(".");
		}
		//parent
		for(Object tObj : $sameParentTumors){
		 	TumorLocator tl = (TumorLocator)tObj;		
		 		
		 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
		 		hystType = tl.getHistologicType();
		 		mt.setHistologicType(hystType);
		 	}
		 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
		 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
	 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
	 		
	 		if(tl.getBodySideFact() != null){
			 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
			 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 	}
	 	
		 	tl.setReadyForRetraction(true);
			update (tl);
System.out.print(".");
		}
		
			insert(mt);

end
  
  /**
  *Merge Lymph nodes on the same body side for BRCA
  */
  
  //rule "merge-axil-and-lymph-nodes"
 // 	salience 99890
//	no-loop true
//	when 
//		$domain : Domain(domainName == FHIRConstants.DOMAIN_BREAST)
//		$record : MedicalRecord()
//		ancestor
		
		
 
 /**
 * Merge tumors for the same bodySite and bodySide
 */
  rule "merge_tumors_on_same_site_side-inProgress"
 	salience 99889
	no-loop true
	when 
		$record : MedicalRecord()
		$tlFact  : TumorLocator($bodySite : bodySite, $bodySite != "", $bodySide : bodySide, $bodySide != "", readyForRetraction == false)
		
		$sameTumors : Set()
      	from collect( TumorLocator(bodySite == $bodySite, bodySide == $bodySide, readyForRetraction == false))
      	
        not(MergedTumor (tumorSiteFactSet contains $tlFact.getTumorSiteFact()))    	
	 then
	 	String hystType = "";
	 	MergedTumor mt = new MergedTumor();
		mt.setBodySite($bodySite);
		mt.setBodySide($bodySide);
		 	
	 	for(Object tObj : $sameTumors){
	 		TumorLocator tl = (TumorLocator)tObj;
		 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
		 		hystType = tl.getHistologicType();
		 		mt.setHistologicType(hystType);
		 	}
		 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
		 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
	 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
	 		
	 		if(tl.getBodySideFact() != null){
			 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
			 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 	}
		 	
		 	if(	tl.getQuadrantFact() != null){
			 	mt.addTumorFact(FHIRConstants.QUADRANT, tl.getQuadrantFact());
			 	insert(new IdMapper(tl.getQuadrantFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getQuadrantFact().getDocumentType(), tl.getQuadrantFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 		}		
			if(tl.getClockfacePosFact() != null){ 	
			 	mt.addTumorFact(FHIRConstants.CLOCKFACE_POSITION, tl.getClockfacePosFact());
			 	insert(new IdMapper(tl.getClockfacePosFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getClockfacePosFact().getDocumentType(), tl.getClockfacePosFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 }
	 	
		 	tl.setReadyForRetraction(true);
System.out.print(".");
			update (tl);
		}		
		
		insert(mt);		
end
  
	
 /**
 * Merge the same site, side, quadrant or create new if not exists
 * If clockface in the same quadrant is different => create another merged tumor
 */ 
 rule "merge_tumors_by_location_exact_all_present"
 	salience 99888
	no-loop true
	when 
		$record : MedicalRecord()
		$tlFact  : TumorLocator($bodySite : bodySite, $bodySite != "", $bodySide : bodySide, $bodySide != "",
						 $quadrant : quadrant, $quadrant != "", $clockFacePos : clockFacePos, $clockFacePos != "", readyForRetraction == false)
		$sameTumors : Set()
      	//from collect( TumorLocator(this != $tlFact, bodySite == $bodySite, bodySide == $bodySide, quadrant == $quadrant,
      	from collect( TumorLocator(bodySite == $bodySite, bodySide == $bodySide, quadrant == $quadrant,
      				clockFacePos != "",
      				readyForRetraction == false))
        not(MergedTumor (tumorSiteFactSet contains $tlFact.getTumorSiteFact()))    	
	 then
	 	Map<String, MergedTumor> mtByClockFacePos = new HashMap<String, MergedTumor>();
	 	
	 	MergedTumor mt = null;
	 	String hystType = "";
	 	for(Object tObj : $sameTumors){
	 		hystType = "";
	 		TumorLocator tl = (TumorLocator)tObj;
	 		mt = mtByClockFacePos.get(tl.getClockFacePos());
	 		if(mt == null){
	 			mt = new MergedTumor();
	 			mt.setBodySite($bodySite);
			 	mt.setBodySide($bodySide);
			 	//mt.setQuadrant($quadrant);
			 	mt.setQuadrant(TumorLocator.normalizeQuadrant($bodySide, tl.getClockFacePos()));
			 	//mt.addToDocumentTypeMap(tl.getDocType(), tl.getDocTumorId());
			 	mt.setClockFacePos(tl.getClockFacePos());
			 	mtByClockFacePos.put(tl.getClockFacePos(), mt);
	 		}	
	 		
		 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
		 		hystType = tl.getHistologicType();
		 		mt.setHistologicType(hystType);
		 	}
		 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
		 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 	if(tl.getBodySideFact() != null){
			 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
			 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			}		 	
		 	if(	tl.getQuadrantFact() != null){
			 	mt.addTumorFact(FHIRConstants.QUADRANT, tl.getQuadrantFact());
			 	insert(new IdMapper(tl.getQuadrantFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getQuadrantFact().getDocumentType(), tl.getQuadrantFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 		}		
			if(tl.getClockfacePosFact() != null){ 	
			 	mt.addTumorFact(FHIRConstants.CLOCKFACE_POSITION, tl.getClockfacePosFact());
			 	insert(new IdMapper(tl.getClockfacePosFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getClockfacePosFact().getDocumentType(), tl.getClockfacePosFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 }
		 	
		 	tl.setReadyForRetraction(true);
System.out.print(".");
			update (tl);
		}
		
		for (Map.Entry<String, MergedTumor> entry : mtByClockFacePos.entrySet()) {
			insert(entry.getValue());
		}
		
		mtByClockFacePos.clear();
		
System.out.print(".");
end



/**
* Merge if the there is one mention of clockface in MergedTumor
* or
* create new if not exists
*/
rule "merge_tumors_by_location_no_clockface"
 	salience 99887
	no-loop true
	when 
		$record : MedicalRecord()
		$tlFact  : TumorLocator($bodySite : bodySite, $bodySite != "", $bodySide : bodySide, $bodySide != "",
						 $quadrant : quadrant, $quadrant != "", clockFacePos == "", readyForRetraction == false)
						 
		not(MergedTumor (tumorSiteFactSet contains $tlFact.getTumorSiteFact()))  
		
		$sameTumors : Set()
      	from collect( TumorLocator(bodySite == $bodySite, bodySide == $bodySide, quadrant == $quadrant,
      				clockFacePos == "", readyForRetraction == false))
             
        $withClockMT : Set()
        from collect ( MergedTumor (bodySite == $bodySite, bodySide == $bodySide, quadrant == $quadrant, clockFacePos != ""))
 
	 then
	 // no mentions of clockface
	 	if($withClockMT.size() == 0){
		 	MergedTumor mt = new MergedTumor();
		 	mt.setBodySite($bodySite);
		 	mt.setBodySide($bodySide);
		 	mt.setQuadrant($quadrant);

		 	
		 	String hystType = "";
		 	for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
		 		//mt.addToDocumentTypeMap(tl.getDocType(), tl.getDocTumorId());
		 		
			 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
			 		hystType = tl.getHistologicType();
			 		mt.setHistologicType(hystType);
			 	}
			 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
			 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 		
		 		if(tl.getBodySideFact() != null){
				 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
				 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 	}
		 		
		 		if(	tl.getQuadrantFact() != null){
				 	mt.addTumorFact(FHIRConstants.QUADRANT, tl.getQuadrantFact());
				 	insert(new IdMapper(tl.getQuadrantFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getQuadrantFact().getDocumentType(), tl.getQuadrantFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 		}
		 	
			 	tl.setReadyForRetraction(true);
				update (tl);
			}
			insert(mt);		
		}
		// exists one MT with 
		else if($withClockMT.size() == 1){
			MergedTumor mt = (MergedTumor)$withClockMT.iterator().next();
			String hystType = mt.getHistologicType();
			for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
			 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
			 		hystType = tl.getHistologicType();
			 		mt.setHistologicType(hystType);
			 	}
			 	
			 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
			 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getBodySideFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 	
		 		
		 		if(tl.getBodySideFact() != null){
				 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
				 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 	}	
		 		
		 		if(	tl.getQuadrantFact() != null){
				 	mt.addTumorFact(FHIRConstants.QUADRANT, tl.getQuadrantFact());
				 	insert(new IdMapper(tl.getQuadrantFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getQuadrantFact().getDocumentType(), tl.getQuadrantFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 	}
			 	
			 	tl.setReadyForRetraction(true);
				update (tl);
			}
			update(mt);
		}
		else{	
			for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
		 		tl.setReadyForRetraction(true);
				update (tl);
			}
			System.err.println("\n *** Can't tumor: merge-tumors-by-location-no-clockface. TumorLocator: "+ $tlFact.getInfo());
			System.err.println("\n *** there are "+$withClockMT.size()+" possible MergedTumors for bodySite = "+$bodySite+"  bodySide = "+$bodySide+
			" quadrant = "+$quadrant+"\n"+$withClockMT);
		}
end

/**
* Merge if the there is one mention of clockface without quadrant in MergedTumor
* or
* create new if not exists
*/

rule "merge-tumors-by-location-no-quadrant"
 	salience 99886
	no-loop true
	when 
		$tlFact  : TumorLocator($bodySite : bodySite, $bodySite != "", $bodySide : bodySide, $bodySide != "",
						 quadrant == "", $clockFacePos : clockFacePos, $clockFacePos != "", readyForRetraction == false)
						 
		not(MergedTumor (tumorSiteFactSet contains $tlFact.getTumorSiteFact())) 				 
		$sameTumors : Set()
      	from collect( TumorLocator( bodySite == $bodySite, bodySide == $bodySide, quadrant == "",
      				clockFacePos == $clockFacePos, readyForRetraction == false)) 
        
        $withQuadrant : Set()
        from collect ( MergedTumor (bodySite == $bodySite, bodySide == $bodySide, quadrant != ""))
 
	 then	

	 	String inferredQ = TumorLocator.normalizeQuadrant($bodySide, $clockFacePos);
		//make tempo <quadrant, MergedTumor> map
		Set<MergedTumor> withQuadrantMT = new HashSet<MergedTumor>();
		for(Object mtObj: $withQuadrant){
			MergedTumor tempMT = (MergedTumor)mtObj;
			if(inferredQ.equals(tempMT.getQuadrant()))
			withQuadrantMT.add(tempMT);
		}
		
	  // no MT with quadtants
	 	if(withQuadrantMT.size() == 0){
		 	MergedTumor mt = new MergedTumor();
		 	mt.setBodySite($bodySite);
		 	mt.setBodySide($bodySide);
		 	mt.setClockFacePos($clockFacePos);
		 	mt.setQuadrant(TumorLocator.normalizeQuadrant($bodySide, $clockFacePos));

		 	
		 	String hystType = "";
		 	for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
		 		//mt.addToDocumentTypeMap(tl.getDocType(), tl.getDocTumorId());
		 		
			 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
			 		hystType = tl.getHistologicType();
			 		mt.setHistologicType(hystType);
			 	}
			 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
			 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 		
		 		if(tl.getBodySideFact() != null){
				 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
				 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 	}
		 		
		 		if(tl.getClockfacePosFact() != null){
				 	mt.addTumorFact(FHIRConstants.CLOCKFACE_POSITION, tl.getClockfacePosFact());
				 	insert(new IdMapper(tl.getClockfacePosFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getClockfacePosFact().getDocumentType(), tl.getClockfacePosFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 	}
		 	
			 	tl.setReadyForRetraction(true);
				update (tl);
System.out.print(".");
			}
			insert(mt);
System.out.print(".");
		}
		
		// exists one MT with 
		else if(withQuadrantMT.size() == 1){
		//else{

			MergedTumor mt = (MergedTumor)withQuadrantMT.iterator().next();
			String hystType = mt.getHistologicType();
			for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
			 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
			 		hystType = tl.getHistologicType();
			 		mt.setHistologicType(hystType);
			 	}
			 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
			 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 		
		 		if(tl.getBodySideFact() != null){
				 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
				 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 	}
		 		
		 		if(tl.getClockfacePosFact() != null){
				 	mt.addTumorFact(FHIRConstants.CLOCKFACE_POSITION, tl.getClockfacePosFact());
				 	insert(new IdMapper(tl.getClockfacePosFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getClockfacePosFact().getDocumentType(), tl.getClockfacePosFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 	}
			 	
			 	tl.setReadyForRetraction(true);
				update (tl);
System.out.print(".");
			}
			update(mt);
System.out.print(".");
		}
		else{
			for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
		 		tl.setReadyForRetraction(true);
				update (tl);
			}
			System.err.println("\n *** Can't tumor: merge-tumors-by-location-no-quadrant. TumorLocator: "+ $tlFact.getInfo());
			System.err.println("\n *** there are "+$withQuadrant.size()+" possible MergedTumors for bodySite = "+$bodySite+"  bodySide = "+
			$bodySide+" clockFacePos = "+$clockFacePos+"\n"+$withQuadrant);
		}
		
		withQuadrantMT.clear();
end	 




rule "merge-child-no-side"
	salience 99883
	no-loop true
	when	
		
		$parent_fact  : TumorLocator($parent_bodySite : bodySite, $parent_bodySite != "", $parent_bodySide : bodySide,  $parent_bodySide != "",
						 quadrant == "", clockFacePos == "", readyForRetraction == false)
		not (TumorLocator(bodySite == $parent_bodySite, $parent_bodySite != "", bodySide != $parent_bodySide,
						 quadrant == "", clockFacePos == "", readyForRetraction == false))				 
		$child_fact  : TumorLocator($child_bodySite : bodySite, bodySiteAnsestors contains $parent_bodySite, bodySide =="",
						 quadrant == "", clockFacePos == "", readyForRetraction == false)
	     
	    not(TumorLocator(bodySite != $child_bodySite, bodySiteAnsestors contains $parent_bodySite, $other_bodtSide : bodySide, 
	    				$other_bodtSide !="", $other_bodtSide != $parent_bodySide,
						 quadrant == "", clockFacePos == "", readyForRetraction == false))
	
		$sameChildTumors : Set()
      	from collect(TumorLocator(bodySite == $child_bodySite, bodySide == "", clockFacePos == "",
      				quadrant == "", readyForRetraction == false, bodySiteAnsestors contains $parent_bodySite))
        not(MergedTumor (tumorSiteFactSet contains $child_fact.getTumorSiteFact()))  
        
        $sameParentTumors : Set()
      	from collect(TumorLocator(bodySite == $parent_bodySite, bodySide == "", clockFacePos == "",
      				quadrant == "", readyForRetraction == false))
        
	then
		MergedTumor mt = new MergedTumor();
		mt.setBodySite($child_bodySite);
		mt.setBodySide($parent_bodySide);
		 	
		String hystType = "";
		//child
		for(Object tObj : $sameChildTumors){
		 	TumorLocator tl = (TumorLocator)tObj;
		 	//mt.addToDocumentTypeMap(tl.getDocType(), tl.getDocTumorId());		
		 		
		 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
		 		hystType = tl.getHistologicType();
		 		mt.setHistologicType(hystType);
		 	}
		 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
		 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
	 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
	 		
	 		if(tl.getBodySideFact() != null){
			 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
			 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 	}
	 	
		 	tl.setReadyForRetraction(true);
			update (tl);
System.out.print(".");
		}
		//parent
		for(Object tObj : $sameParentTumors){
		 	TumorLocator tl = (TumorLocator)tObj;		
		 		
		 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
		 		hystType = tl.getHistologicType();
		 		mt.setHistologicType(hystType);
		 	}
		 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
		 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
	 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
	 		
	 		if(tl.getBodySideFact() != null){
			 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
			 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 	}
	 	
		 	tl.setReadyForRetraction(true);
			update (tl);
System.out.print(".");
		}
		
			insert(mt);

end



/**
* If no Quadrants and no clockface position
*/
rule "merge-tumors-by-location-no-q-clock"
 	salience 99875
	no-loop true
	when 
		$tlFact  : TumorLocator($bodySite : bodySite, $bodySite != "", $bodySide : bodySide, $bodySide != "",
						 quadrant == "", $clockFacePos : clockFacePos, $clockFacePos == "", readyForRetraction == false)
		$sameTumors : Set()
      	from collect(TumorLocator(bodySite == $bodySite, bodySide == $bodySide, clockFacePos == $clockFacePos,
      				quadrant == "", readyForRetraction == false))
        not(MergedTumor (tumorSiteFactSet contains $tlFact.getTumorSiteFact()))  
        
        $withClockMT : Set()
        from collect ( MergedTumor (bodySite == $bodySite, bodySide == $bodySide))
 
	 then	
	  // no mentions ofbodyside
	  	//$tlFact.setReadyForRetraction(true);
		//update ($tlFact);
		
	 	$sameTumors.add($tlFact);
	 	if($withClockMT.size() == 0){
		 	MergedTumor mt = new MergedTumor();
		 	mt.setBodySite($bodySite);
		 	mt.setBodySide($bodySide);
		 	
		 	String hystType = "";
		 	for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
		 		//mt.addToDocumentTypeMap(tl.getDocType(), tl.getDocTumorId());
		 		
			 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
			 		hystType = tl.getHistologicType();
			 		mt.setHistologicType(hystType);
			 	}
			 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
			 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 		
		 		if(tl.getBodySideFact() != null){
				 	mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
				 	insert(new IdMapper(tl.getBodySideFact().getIdentifier(), mt.getMergedTumorId(), 
			 		tl.getBodySideFact().getDocumentType(), tl.getBodySideFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
			 	}
			 		
		 	
			 	tl.setReadyForRetraction(true);
				update (tl);
System.out.print(".");
			}
			insert(mt);
System.out.print(".");
		}
		// exists one MT with 
		else if($withClockMT.size() == 1){
			MergedTumor mt = (MergedTumor)$withClockMT.iterator().next();
			String hystType = mt.getHistologicType();
			for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
			 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
			 		hystType = tl.getHistologicType();
			 		mt.setHistologicType(hystType);
			 	}
			 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
			 	if(tl.getBodySideFact() != null)
			 		mt.addTumorFact(FHIRConstants.LATERALITY, tl.getBodySideFact());
			 	
			 	tl.setReadyForRetraction(true);
				update (tl);
System.out.print(".");
			}
			update(mt);
System.out.print(".");
		}
		else{
			for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
		 		tl.setReadyForRetraction(true);
				update (tl);
			}
			System.err.println("\n *** Can't merge-tumors-by-location-no-q-clock. TumorLocator: "+ $tlFact.getInfo());
			System.err.println("\n *** there are "+$withClockMT.size()+" possible MergedTumors for bodySite == "+$bodySite+"  bodySide == "+$bodySide+"\n"+$withClockMT);
		}
end	 

/**
* No body side
*/
rule "merge-tumors-by-location-no-bodyside"
 	salience 99874
	no-loop true
	when 
		$tlFact  : TumorLocator($bodySite : bodySite, $bodySite != "", bodySide == "",
						 quadrant == "", clockFacePos == "", readyForRetraction == false)
		$sameTumors : Set()
      	from collect( TumorLocator( bodySite == $bodySite, bodySide == "", clockFacePos == "", quadrant =="", readyForRetraction == false))
        not(MergedTumor (tumorSiteFactSet contains $tlFact.getTumorSiteFact()))  
        
        $withClockMT : Set()
        from collect ( MergedTumor (bodySite == $bodySite))
 
	 then	
		
	  // no mentions of bodyside
	 	if($withClockMT.size() == 0){
		 	MergedTumor mt = new MergedTumor();
		 	mt.setBodySite($bodySite);
		 	
		 	String hystType = "";
		 	for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
		 		//mt.addToDocumentTypeMap(tl.getDocType(), tl.getDocTumorId());
		 		
			 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
			 		hystType = tl.getHistologicType();
			 		mt.setHistologicType(hystType);
			 	}
			 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
			 	insert(new IdMapper(tl.getTumorSiteFact().getIdentifier(), mt.getMergedTumorId(), 
		 		tl.getTumorSiteFact().getDocumentType(), tl.getTumorSiteFact().getSummaryId(), FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId()));
		 	
			 	tl.setReadyForRetraction(true);
				update (tl);
System.out.print(".");
			}
			insert(mt);
System.out.print(".");
		}
		// exists one MT with 
		else if($withClockMT.size() == 1){
			MergedTumor mt = (MergedTumor)$withClockMT.iterator().next();
			String hystType = mt.getHistologicType();
			for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
			 	if(!tl.getHistologicType().equals("") && hystType.equals("")){
			 		hystType = tl.getHistologicType();
			 		mt.setHistologicType(hystType);
			 	}
			 	mt.addTumorFact(FHIRConstants.BODY_SITE, tl.getTumorSiteFact());
			 	
			 	tl.setReadyForRetraction(true);
				update (tl);
System.out.print(".");
			}
			update(mt);
System.out.print(".");
		}
		else{
			for(Object tObj : $sameTumors){
		 		TumorLocator tl = (TumorLocator)tObj;
		 		tl.setReadyForRetraction(true);
				update (tl);
			}
			System.err.println("\n *** Can't merge-tumors-by-location-no-bodyside. TumorLocator: "+ $tlFact.getInfo());
			System.err.println("\n *** there are "+$withClockMT.size()+" possible MergedTumors for bodySite == "+$bodySite+"\n"+$withClockMT);
		}
end	

/*rule "test-tumorLocators"
	salience 994444
	no-loop true
	when 
		$tl : TumorLocator(readyForRetraction == false)
	then
		System.out.println("****");
		System.out.println($tl.getInfo());
end */

/**
* If there is a Pathology Report, leave only thre tumors from PR, remove other - statistics
*/
rule "get-MergedTumor-stats"
 	salience 99555
	no-loop true
	when 
		$mt : MergedTumor(gotStatistics == false)
	then
		//get stats
		$mt.setGotStatistics(true);
//		System.out.println($mt.getDocStatistics());
end 



///**
//* Adds histologic type to Tumor if any
//*/  
rule "add-histologicType"
  	salience 100000
	no-loop true
	when
		$site_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY,$t_summaryId : summaryId)
		$tumorf_f : Fact(summaryType == FHIRConstants.TUMOR_PHENOTYPE, category == FHIRConstants.HAS_HISTOLOGIC_TYPE, documentType != FHIRConstants.RECORD_SUMMARY, 
				containerIdentifier contains $t_summaryId, $hist_name : name)
		$tl : TumorLocator(docTumorId == $t_summaryId, histologicType == "")
	then
		modify($tl){
			setHistologicType($hist_name);
		}
end

/*
rule "TEST-print-specific-RecordSummary"
	salience 99000
	no-loop true
	when 
		$summaryF : Fact(documentType == FHIRConstants.RECORD_SUMMARY, type == FHIRConstants.TUMOR_SUMMARY, 
			rulesApplied not contains "TEST-print-specific-RecordSummary")
		
	then
		System.out.println("* RecordSummary: "+$summaryF.getInfo());
		modify($summaryF){addRulesApplied("TEST-print-specific-RecordSummary") } 
end	
*/
/*
rule "print-cancerSummary"
	no-loop true
	when 
		$summaryF : Fact(summaryType == "CancerSummary", documentType == FHIRConstants.RECORD_SUMMARY)
	then
		System.out.println("* CancerSummary: "+$summaryF.getInfo());
end	
*/
/*
rule "print-idMap"
	no-loop true
	when 
		$m :IdMapper()
	then
		System.out.println("IdMapper oldId: "+$m.getOldId()+" newId: "+$m.getNewId()+" oldDocumantType: "+$m.getOldDocumantType()
		+" oldSummaryId: "+$m.getOldSummaryId()+" newSummaryId: "+$m.getNewSummaryId());
end	
*/
/*
rule "print-Specific-RecordSummary"
	salience 3
	no-loop true
	when 
		$summaryF : Fact(documentType == FHIRConstants.RECORD_SUMMARY, identifier matches ".*TumorSummary.*")
	then
		System.out.println("* RecordSummary: "+$summaryF.getInfo());
end	
*/
/*
rule "print-specific-RecordSummary"
	salience -3
	no-loop true
	when 
		$summaryF : Fact(documentType == FHIRConstants.RECORD_SUMMARY, $name : name, ($name == "Axilla" || $name == "Axillary_Lymph_Node"))
	then
		System.out.println("* RecordSummary: "+$summaryF.getInfo());
		List<Fact> provF =  $summaryF.getProvenanceFacts();
		for(Fact f:provF)
		System.out.println("PRV_FACT: "+f.getInfo());
end	
*/
/*
rule "print-RecordSummary-Modifier"
	salience 2
	no-loop true
	when 
		$summaryF : Fact(documentType == "RecordSummary-Modifier")
	then
		System.out.print("*** RecordSummary-MODIFIER: "+$summaryF.getInfo());
end	

rule "print-TumorLocator"
	salience 1
	no-loop true
	when 
		$f : TumorLocator(clockFacePos=="3_o_clock_position")
	then
		System.out.println("*** TumorLocator: "+$f.getInfo());
end	


rule "print-BodySite-facts"

	no-loop true
	when 
		Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_BODY_SITE
		$f : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_BODY_SITE,
			 rulesApplied not contains "print-BodySite-facts")

	then
		modify($f){addRulesApplied("print-BodySite-facts") } 
		System.out.println("*** BodySite: "+$f.getInfo());
end	
*/


/*
rule "print-MergedTumor"
	salience 1
	no-loop true
	when 
		$f : MergedTumor(gotStatistics == false)
	then
		$f.setGotStatistics(true);
		System.out.println("***");
		System.out.println(" MergedTumor: "+$f.getInfo());
end	


rule "print-Medical-RecordSummary"
	no-loop true
	when 
		$record : MedicalRecord()
	then
	System.out.print(".");
		System.out.print("PRINT Medical-RecordSummary: "+$record.getSummaryText());
	System.out.print(".");
end
*/
