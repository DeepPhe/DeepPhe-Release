package org.healthnlp.deepphe.uima.drools;

import java.lang.Object;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.ArrayList;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fhir.fact.BodySiteFact;
import org.healthnlp.deepphe.fhir.fact.DefaultFactList;
import org.healthnlp.deepphe.fhir.fact.Fact;
import org.healthnlp.deepphe.fhir.fact.FactFactory;
import org.healthnlp.deepphe.fhir.fact.FactHelper;
import org.healthnlp.deepphe.fhir.fact.FactList;


import org.healthnlp.deepphe.fhir.Patient;

import org.healthnlp.deepphe.fhir.summary.*;
import org.healthnlp.deepphe.uima.drools.*;


/**
* sets Diagnosis, histologicType, cancerType
*/

rule "set-Cancer-CancerType"
	salience 45600
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, $cSummary_id : summaryId)
   		Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_CANCER_TYPE)
	    not(Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType == FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_CANCER_TYPE))	
	    
	    $cHistFacts : Set()
	    from collect (Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_CANCER_TYPE))
	    
	then
		for(Object obj : $cHistFacts){
			Fact cF = (Fact)obj;
			Fact ctf = FactFactory.createFact(cF, FHIRConstants.HAS_CANCER_TYPE, $domain.getOntologyURI()+"#"+cF.getName(), FHIRConstants.RECORD_SUMMARY);
			ctf.setIdentifier($cancerFact.getIdentifier());
			ctf.addProvenanceFact(cF);
			ctf.getContainerIdentifier().clear();
			ctf.addContainerIdentifier($cSummary_id);
			ctf.setSummaryType(FHIRConstants.CANCER_PHENOTYPE );
			ctf.setSummaryId(FHIRConstants.CANCER_PHENOTYPE +"-"+$cSummary_id);
			
			FactHelper.addFactToSummary(ctf, $record.getCancerSummary(), $cancerFact.getIdentifier(), $domain.getOntologyURI());
			insert(ctf);
		}

		System.gc();
//Domain.printMemoryStats();
end  

rule "set-Tumor-CancerType"
	salience 45558
	no-loop true
	when
		$domain : Domain($domainName : domainName)
		$record : MedicalRecord()	
	
	    $tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, $t_summaryId : summaryId)
	    $tpheF : Fact(summaryType == FHIRConstants.TUMOR_PHENOTYPE, documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_CANCER_TYPE, 
	    	containerIdentifier contains $t_summaryId)
	    IdMapper(oldSummaryId == $t_summaryId, $newSummaryId : newSummaryId)
	    $recordTFact : Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, summaryId == $newSummaryId)
	    not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_PHENOTYPE, category == FHIRConstants.HAS_CANCER_TYPE, provenanceFacts contains $tpheF))

	    
	then
		//tumor level
//	System.out.println("general set-Tumor-CancerType");	
		String newId = FHIRConstants.TUMOR_PHENOTYPE +"-"+$newSummaryId;
		Fact tf = FactFactory.createFact($tpheF, FHIRConstants.CONDITION, $domain.getOntologyURI()+"#"+$tpheF.getName(), FHIRConstants.RECORD_SUMMARY);
		tf.setIdentifier(newId);
		tf.addContainerIdentifier($newSummaryId);
		tf.addProvenanceFact($tpheF);
		tf.setSummaryType(FHIRConstants.TUMOR_PHENOTYPE);
		insert(tf);
		insert(new IdMapper($tpheF.getIdentifier(), newId, $tpheF.getDocumentType(), $tpheF.getSummaryId(), newId));
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier($newSummaryId).getPhenotype().addFact(FHIRConstants.HAS_CANCER_TYPE, tf)
		}
		
end   


rule  "set-Tumor-HistologicType"
	salience 45557
	no-loop true
	when
		$domain : Domain($domainName : domainName)
		$record : MedicalRecord()	
	
	    $tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, $t_summaryId : summaryId)
	    $tpheF : Fact(summaryType == FHIRConstants.TUMOR_PHENOTYPE, documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_HISTOLOGIC_TYPE, 
	    	containerIdentifier contains $t_summaryId)
	    IdMapper(oldSummaryId == $t_summaryId, $newSummaryId : newSummaryId)
	    $recordTFact : Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, summaryId == $newSummaryId)
	    not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_PHENOTYPE, category == FHIRConstants.HAS_HISTOLOGIC_TYPE, 
	    	provenanceFacts contains $tpheF))

	    
	then
		//tumor level
		
		String newId = FHIRConstants.TUMOR_PHENOTYPE +"-"+$newSummaryId;
		Fact tf = FactFactory.createFact($tpheF, FHIRConstants.CONDITION, $domain.getOntologyURI()+"#"+$tpheF.getName(), FHIRConstants.RECORD_SUMMARY);
		tf.setIdentifier(newId);
		tf.addContainerIdentifier($newSummaryId);
		tf.addProvenanceFact($tpheF);
		tf.setSummaryType(FHIRConstants.TUMOR_PHENOTYPE);
		insert(tf);
		insert(new IdMapper($tpheF.getIdentifier(), newId, $tpheF.getDocumentType(), $tpheF.getSummaryId(), newId));
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier($newSummaryId).getPhenotype().addFact(FHIRConstants.HAS_HISTOLOGIC_TYPE, tf)
		}
		
end   

rule  "set-Cancer-HistologicType"
	salience 45556
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, $cSummary_id : summaryId)
   		Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_HISTOLOGIC_TYPE)
	    not(Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType == FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_HISTOLOGIC_TYPE))	
	    
	    $cHistFacts : Set()
	    from collect (Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_HISTOLOGIC_TYPE))
	    
	then
		for(Object obj : $cHistFacts){
			Fact cF = (Fact)obj;
			Fact ctf = FactFactory.createFact(cF, FHIRConstants.HAS_HISTOLOGIC_TYPE, $domain.getOntologyURI()+"#"+cF.getName(), FHIRConstants.RECORD_SUMMARY);
			ctf.setIdentifier($cancerFact.getIdentifier());
			ctf.addProvenanceFact(cF);
			ctf.getContainerIdentifier().clear();
			ctf.addContainerIdentifier($cSummary_id);
			ctf.setSummaryType(FHIRConstants.CANCER_PHENOTYPE );
			ctf.setSummaryId(FHIRConstants.CANCER_PHENOTYPE +"-"+$cSummary_id);
			
			FactHelper.addFactToSummary(ctf, $record.getCancerSummary(), $cancerFact.getIdentifier(), $domain.getOntologyURI());
			insert(ctf);
		}

end  

/*
* Sets the most specific tumor diagnosis across documents. Lesion is not a diagnosis.
*/
rule  "set-Tumor-Diagnosis"
	salience 44444
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY)
		
		$tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_DIAGNOSIS, 
			$deepName : name, $deepName != "Lesion", $deepOldSummaryId : summaryId)
			//$deepName : name, $deepOldSummaryId : summaryId)
	    IdMapper(oldSummaryId == $deepOldSummaryId, $newSummaryId : newSummaryId)
	    // most specific
	    not((Fact(this != $tF, summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, $name : name,
	    		category == FHIRConstants.HAS_DIAGNOSIS, 
	    		ancestors contains $deepName, $oldSummaryId : summaryId)
	    	&& IdMapper(oldSummaryId == $oldSummaryId, newSummaryId == $newSummaryId )	    		
	    	))
	    	
	    $recordTFact : Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, summaryId == $newSummaryId)
	    not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_DIAGNOSIS, 
	    	provenanceFacts contains $tF))
	    
	    $deepOldSummaryIdSet : Set()
	    from collect (Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_DIAGNOSIS, 
	    	name == $deepName, summaryId == $deepOldSummaryId, rulesApplied not contains "set-Tumor-Diagnosis"))

	then
		if($deepOldSummaryIdSet.size() > 0) {
			
			Fact tf = FactFactory.createFact($tF, FHIRConstants.HAS_DIAGNOSIS, $domain.getOntologyURI()+"#"+$deepName, FHIRConstants.RECORD_SUMMARY);
//System.out.println("set-Tumor-Diagnosis to "+$deepName+" $newSummaryId: "+$newSummaryId);
			tf.addContainerIdentifier($newSummaryId);
			tf.setIdentifier(tf.getName()+"-"+$newSummaryId);
			tf.setSummaryId($newSummaryId);
			
			for (Object obj: $deepOldSummaryIdSet){
				Fact diagnFact = (Fact)obj;
				modify(diagnFact){	addRulesApplied("set-Tumor-Diagnosis") }
				tf.addProvenanceFact(diagnFact);
				insert(new IdMapper(diagnFact.getIdentifier(), tf.getIdentifier(), diagnFact.getDocumentType(), diagnFact.getSummaryId(), tf.getSummaryId()));
			}
			FactHelper.addFactToSummary(tf, $record.getCancerSummary(), $newSummaryId, $domain.getOntologyURI());
			insert(tf);
	}		
end  

/*
* Only primary tumors should be in CS. Lesion is not considered to be a diagnosis
*/
rule  "set-Cancer-Diagnosis"
	salience 44443
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY)
		
		$tF : Fact(category == FHIRConstants.HAS_DIAGNOSIS, documentType == FHIRConstants.RECORD_SUMMARY, 
			summaryType == FHIRConstants.TUMOR_SUMMARY,	$t_summary_id :summaryId, $deepName : name,
			$deepName != "Lesion")
		Fact(summaryId == $t_summary_id, category == FHIRConstants.HAS_TUMOR_TYPE, documentType == FHIRConstants.RECORD_SUMMARY, 
			summaryType == FHIRConstants.TUMOR_SUMMARY, name == FHIRConstants.PRIMARY_TUMOR)
		not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.CANCER_SUMMARY, category == FHIRConstants.HAS_DIAGNOSIS, 
	    	name == $deepName)) 
	then
		//cancer level
		Fact ctf = FactFactory.createFact($tF, FHIRConstants.HAS_DIAGNOSIS, $domain.getOntologyURI()+"#"+$deepName, FHIRConstants.RECORD_SUMMARY);
		ctf.setIdentifier($cancerFact.getIdentifier());
		ctf.getContainerIdentifier().clear();
		ctf.addContainerIdentifier($cancerFact.getSummaryId());
		ctf.setSummaryType(FHIRConstants.CANCER_SUMMARY);
		ctf.setSummaryId($cancerFact.getSummaryId());
		
		FactHelper.addFactToSummary(ctf, $record.getCancerSummary(), $cancerFact.getIdentifier(), $domain.getOntologyURI());
		insert(ctf);
		
end  

rule  "set-Tumor-TumorExtent"
	salience 45555
	no-loop true
	when
		$domain : Domain($domainName : domainName)
		$record : MedicalRecord()		
	    $tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, $t_summaryId : summaryId)
	    $tpheF : Fact(summaryType == FHIRConstants.TUMOR_PHENOTYPE, documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_TUMOR_EXTENT, 
	    	containerIdentifier contains $t_summaryId,
	    	rulesApplied not contains "setTumorExtent")
	    IdMapper(oldSummaryId == $t_summaryId, $newSummaryId : newSummaryId)
	    $recordTFact : Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, summaryId == $newSummaryId)
	    not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_PHENOTYPE, category == FHIRConstants.HAS_TUMOR_EXTENT, 
	    	provenanceFacts contains $tpheF))	    
	then
	System.out.print(".");
		modify($tpheF){	addRulesApplied("setTumorExtent") }
		//tumor level
		
		String newId = FHIRConstants.TUMOR_PHENOTYPE +"-"+$newSummaryId;
		Fact tf = FactFactory.createFact($tpheF, FHIRConstants.CONDITION, $domain.getOntologyURI()+"#"+$tpheF.getName(), FHIRConstants.RECORD_SUMMARY);
		tf.setIdentifier(newId);
		tf.addContainerIdentifier($newSummaryId);
		tf.addProvenanceFact($tpheF);
		tf.setSummaryType(FHIRConstants.TUMOR_PHENOTYPE);
		insert(tf);
		insert(new IdMapper($tpheF.getIdentifier(), newId, $tpheF.getDocumentType(), $tpheF.getSummaryId(), newId));
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier($newSummaryId).getPhenotype().addFact(FHIRConstants.HAS_TUMOR_EXTENT, tf)
		}
		
end   


rule  "set-Cancer-TumorExtent"
	salience 45554
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, $cSummary_id : summaryId)
   		Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_TUMOR_EXTENT)
	    not(Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType == FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_TUMOR_EXTENT))	
	    
	    $cHistFacts : Set()
	    from collect (Fact(summaryType==FHIRConstants.CANCER_PHENOTYPE , documentType != FHIRConstants.RECORD_SUMMARY, category == FHIRConstants.HAS_TUMOR_EXTENT))
	    
	then
		for(Object obj : $cHistFacts){
			Fact cF = (Fact)obj;
			Fact ctf = FactFactory.createFact(cF, FHIRConstants.HAS_TUMOR_EXTENT, $domain.getOntologyURI()+"#"+cF.getName(), FHIRConstants.RECORD_SUMMARY);
			ctf.setIdentifier($cancerFact.getIdentifier());
			ctf.addProvenanceFact(cF);
			ctf.getContainerIdentifier().clear();
			ctf.addContainerIdentifier($cSummary_id);
			ctf.setSummaryType(FHIRConstants.CANCER_PHENOTYPE );
			ctf.setSummaryId(FHIRConstants.CANCER_PHENOTYPE +"-"+$cSummary_id);
			
			FactHelper.addFactToSummary(ctf, $record.getCancerSummary(), $cancerFact.getIdentifier(), $domain.getOntologyURI());
			insert(ctf);
		}
end

/**
* Only Primary tumor locations should be present in the CancerSummary
* Should run AFTER the tumors from PR for ant domain
*/
rule "retract-non-PR-tumors-from-CS"
	salience 2
	no-loop true
	when
		$record : MedicalRecord()
      	$not_pRTumors : Set()
      	from collect( Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY,
														category == FHIRConstants.HAS_TUMOR_TYPE, $name: name, $name != FHIRConstants.PRIMARY_TUMOR,
														rulesApplied not contains "retract-non-PR-tumors-from-CS"))
	then
		FactList cancerBS = $record.getCancerSummary().getBodySite();
		for(Object obj_f : $not_pRTumors){
			Fact ff = (Fact)obj_f;
			modify (ff){	addRulesApplied("retract-non-PR-tumors-from-CS") }
			TumorSummary ts = $record.getCancerSummary().getTumorSummaryByIdentifier(ff.getSummaryId());
			cancerBS.removeAll(ts.getBodySite());
		}
end

		
/*
* In presence of PR report retract any tumor without PR reports
*/
rule "retract-non-PR-tumors-BRCA"
	salience 4
		no-loop true
		when
			$record : MedicalRecord()
			Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)
			MergedTumor(fromPathologyReport == true, checkedForPR == false)
			$allTumors : Set()
      		from collect( MergedTumor(checkedForPR == false))
	then

		for(Object obj : $allTumors){
			MergedTumor mt = (MergedTumor)obj;
//System.out.println(mt.getDocStatistics());
			if(!mt.isFromPathologyReport()){
//System.out.println("****** retract-non-PR-tumors REMOVE "+mt.getMergedTumorId());
				mt.setCheckedForPR(true);
				TumorSummary tss = $record.getCancerSummary().getTumorSummaryByIdentifier(FHIRConstants.TUMOR_SUMMARY +"-"+mt.getMergedTumorId());
//System.out.println("RETRACT TS: "+tss.getResourceIdentifier());
				modify($record){
					getCancerSummary().removeTumor(tss)
				}
			}
		}
end


/*
* In absence of PR report all tumors should stay
*/
rule "no-tumor-retraction-just-info"
	salience 3
		no-loop true
		when
			$record : MedicalRecord()
			not(MergedTumor(fromPathologyReport == true, checkedForPR == false))
			$allTumors : Set()
      		from collect( MergedTumor(checkedForPR == false))
	then
		//get stats
		for(Object obj : $allTumors){
			MergedTumor mt = (MergedTumor)obj;
//System.out.println("***** no-tumor-retraction-just-info NO REMOVE "+mt.getMergedTumorId());
			mt.setFromPathologyReport(true);
			mt.setCheckedForPR(true);
//System.out.println(mt.getDocStatistics());
		}
end

/*
* Remove tumors without Diagnosis
*/

rule "remove-tumor-without-diagnosis"
	//salience 2
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY)
	    $recordTFact : Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryType == FHIRConstants.TUMOR_SUMMARY, $summaryId : summaryId)
	    not(Fact(documentType == FHIRConstants.RECORD_SUMMARY, summaryId == $summaryId, category == FHIRConstants.HAS_DIAGNOSIS))

	then
		TumorSummary ts = $record.getCancerSummary().getTumorSummaryByIdentifier($summaryId);
		modify($record){
			getCancerSummary().removeTumor(ts)
		}
		retract($recordTFact);
end
	   
/*
* Remove all tumors from CS without any contained facts
*/
rule "remove_empty_tumors"
	no-loop true
	when 
		$record : MedicalRecord()
		not (String (this == "removed_empty_tumors"))
	then
		insert("removed_empty_tumors");
		
		List<TumorSummary> tsList =  $record.getCancerSummary().getTumors();
		for(TumorSummary ts: tsList){
			if(ts.getContainedFacts().size() == 0){
				$record.getCancerSummary().removeTumor(ts);
			}
		}		
end	

//This summarization hahhens AFTER Drools
/*
rule "remove-CS-locations-no-diagnosis"
	no-loop true
	when
		$record : MedicalRecord()	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, 
		documentType == FHIRConstants.RECORD_SUMMARY, $summaryId : summaryId, 
		rulesApplied not contains "remove-CS-locations-no-diagnosis")
		not(Fact(summaryType==FHIRConstants.CANCER_SUMMARY, 
		category == FHIRConstants.HAS_DIAGNOSIS, documentType == FHIRConstants.RECORD_SUMMARY))
	then
		modify($cancerFact){	addRulesApplied("remove-CS-locations-no-diagnosis") }
		FactList bs = $record.getCancerSummary().getBodySite();
System.out.println("remove-CS-locations-no-diagnosis: sz :"+bs.size());
		for(Fact f: bs)
			System.out.println("RRR: "+f.getInfoDrools());			
end
*/			
		
		