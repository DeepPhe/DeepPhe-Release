//created on: Apr 25, 2018
package org.healthnlp.deepphe.uima.drools.melanoma

import java.lang.Object;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fact.Fact;
import org.healthnlp.deepphe.fact.FactFactory;
import org.healthnlp.deepphe.fact.FactHelper;
import org.healthnlp.deepphe.fact.BodySiteFact;

import org.healthnlp.deepphe.summary.*;
import org.healthnlp.deepphe.uima.drools.*;

declare ExcludeFromPT
	notPTList : List
end

/*
* Initiate list of AS which can NOT be a Primary Tumor for melanoma
*/
rule "init_ExcludeFromPT"
	salience 88890
	no-loop true
	when
		not(ExcludeFromPT())
	then
		ExcludeFromPT sf = new ExcludeFromPT();
		List list = new ArrayList<String>();
		// add exclusions here. Comment it out or remove when not needed anymore
		list.add("Frontal_Lobe");
		list.add("Ovary");
		list.add("Brain");
		list.add("Rectosigmoid_Colon");
		list.add("Pelvis");
		list.add("Inguinal_Region");
		list.add("Cecum");
		list.add("Parietal_Lobe");
		list.add("Occipital_Lobe");
		list.add("Lower_Lobe_of_the_Lung");
		list.add("Upper_Lobe_of_the_Lung");
		list.add("Lower_Lobe_of_the_Right_Lung");
		list.add("Upper_Lobe_of_the_Right_Lung");
		list.add("Lower_Lobe_of_the_Left_Lung");
		list.add("Upper_Lobe_of_the_Left_Lung");
		list.add("Lung");
		list.add("Vertebral_Column");  // per email 9/13/18
		list.add("Breast");            // per email 9/13/18
		// end comment or removal
		sf.setNotPTList(list);
		
		insert(sf);
end

/**
* in presence of "Metastatic" diagnosis make this tumor type = "distant"
*/
rule  "mela-distant"
		salience 88880
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain()	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, 
					$cSummaryId : summaryId)
		
		$tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
				category == FHIRConstants.HAS_DIAGNOSIS, $deepOldSummaryId : summaryId, 
				(summaryId matches ".*Metastasis.*" || name matches ".*Metastat.*"))
		
		$stF: Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, 
					documentType != FHIRConstants.RECORD_SUMMARY,
					summaryId == $deepOldSummaryId,
					name != "Lymph_Node", ancestors not contains "Lymph_Node")	
							
		$mt : MergedTumor(tumorSummaryIdSet contains $deepOldSummaryId, tumorSiteFactSet contains $stF, 
					readyForRetraction == false) 
		
	then
		
		
		//add new tumor
		Fact bsFact = $mt.getTumorSiteFactSet().iterator().next();
		String newId = $mt.getTumorSummaryID();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact(bsFact, FHIRConstants.BODY_SITE, 
					$domain.getOntologyURI()+"#"+bsFact.getName(), FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($cSummaryId); 
		tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.addProvenanceFact(bsFact);
		tf.addRulesApplied("mela-distant");
		insert(new IdMapper(bsFact.getIdentifier(), tf.getIdentifier(), bsFact.getSummaryId(), newId));
		insert(tf);
//System.out.println("\n*** distant inserting TUMOR for diag: "+$tF.getName()+" bs: "+$stF.getName());
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.DISTANT_METASTASIS, 
						tf, $cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, 
						FHIRConstants.RECORD_SUMMARY, FHIRConstants.TUMOR_TYPE);
											
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
			
		$mt.addBodyModifiersToRecordFact(tf, $cancerFact, $domain.getOntologyURI(), newId);
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	
	
		insert (tumorTypeF);
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());		
		$mt.setReadyForRetraction(true);
		update ($mt);
System.out.print(".");		
end


/**
* Make tumor "Distant" if it is in the ExcludeFromPT list
*/
rule  "mela_distant_exclude_from_PT"
	salience 88879
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain()	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, 
					$cSummaryId : summaryId)
		
		$tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
				category == FHIRConstants.HAS_DIAGNOSIS, $deepOldSummaryId : summaryId)
		
		$stF: Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, 
					documentType != FHIRConstants.RECORD_SUMMARY,
					summaryId == $deepOldSummaryId, $name : name,
					$name != "Lymph_Node", ancestors not contains "Lymph_Node")
			
		ExcludeFromPT(	notPTList 	contains $name)			
		$mt : MergedTumor(tumorSummaryIdSet contains $deepOldSummaryId, tumorSiteFactSet contains $stF, 
					readyForRetraction == false) 
		
	then
		
		
		//add new tumor
		Fact bsFact = $mt.getTumorSiteFactSet().iterator().next();
		String newId = $mt.getTumorSummaryID();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact(bsFact, FHIRConstants.BODY_SITE, 
					$domain.getOntologyURI()+"#"+bsFact.getName(), FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($cSummaryId); 
		tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.addProvenanceFact(bsFact);
		tf.addRulesApplied("mela_distant_exclude_from_PT");
		insert(new IdMapper(bsFact.getIdentifier(), tf.getIdentifier(), bsFact.getSummaryId(), newId));
		insert(tf);
//System.out.println("\n*** distant inserting TUMOR for diag: "+$tF.getName()+" bs: "+$stF.getName());
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.DISTANT_METASTASIS, 
						tf, $cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, 
						FHIRConstants.RECORD_SUMMARY, FHIRConstants.TUMOR_TYPE);
											
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
			
		$mt.addBodyModifiersToRecordFact(tf, $cancerFact, $domain.getOntologyURI(), newId);
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	
	
		insert (tumorTypeF);
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());		
		$mt.setReadyForRetraction(true);
		update ($mt);
System.out.print(".");		
end


rule "mela-primaryTumor"
	salience 88878
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain()	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, 
					$newSummaryId : summaryId)
		//
		$tF : Fact(summaryType == FHIRConstants.TUMOR_SUMMARY, documentType != FHIRConstants.RECORD_SUMMARY, 
					category == FHIRConstants.HAS_DIAGNOSIS, $deepOldSummaryId : summaryId)
	
		$tumorFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, 
					documentType != FHIRConstants.RECORD_SUMMARY, 
					summaryId == $deepOldSummaryId,
					name != "Lymph_Node", ancestors not contains "Lymph_Node")		
								
		$tl_1 : MergedTumor($tumorSummaryIdSet : tumorSummaryIdSet, tumorSiteFactSet contains $tumorFact,
					$tumorSummaryIdSet contains $deepOldSummaryId, readyForRetraction == false, 
					rulesApplied not contains "mela-primaryTumor")

		//not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, 
		//		provenanceFacts contains $tumorFact))
		
	then
//System.out.println("$tF: "+$tF.getInfoDrools(true));
		modify($tl_1){	addRulesApplied("mela-primaryTumor") }
		//add new tumor
		String newId = $tl_1.getTumorSummaryID();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($tumorFact, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$tumorFact.getName(), 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); 
		tf.setSummaryId(newId);
		tf.setIdentifier($tumorFact.getName()+"-"+newId);
		tf.addProvenanceFact($tumorFact);
		tf.addRulesApplied("mela-primaryTumor");
		insert(new IdMapper($tumorFact.getIdentifier(), tf.getIdentifier(),$tumorFact.getSummaryId(), newId));
		insert(tf);
//System.out.println("*** primaryTumorm melanoma BODY_SITE: "+$tumorFact.getName());
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.PRIMARY_TUMOR, 
				tf, $cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE,
				FHIRConstants.RECORD_SUMMARY, FHIRConstants.TUMOR_TYPE);
	
		if(!$tl_1.getBodySide().equals("")){
			Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$tl_1.getBodySide(), tf, 
							$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, 
							FHIRConstants.RECORD_SUMMARY, FHIRConstants.LATERALITY);
			tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
			tumorsideF.addRulesApplied("mela-primaryTumor");
			
			insert (tumorsideF);
		}
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
		tumorTypeF.addRulesApplied("mela-primaryTumor");
		
//System.out.println("mela-primaryTumor	adding 	tf: "+tf.getInfoDrools(false));
		
		$tl_1.addBodyModifiersToRecordFact(tf, $cancerFact, $domain.getOntologyURI(), newId);
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_BODY_SITE, tf),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	


		insert (tumorTypeF);
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());

		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);
System.out.print(".");		
end


// In presence of Primary tumor with side, Regional metastasis could be only in Lymph Node on the same side
rule "mela-Regional_Lymph_Node_with_same_side"
	salience 88876
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_MELANOMA)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, 
					$newSummaryId : summaryId)
		
		//primary with side:
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, 
					documentType == FHIRConstants.RECORD_SUMMARY, $t_summaryId: summaryId, 
					name==FHIRConstants.PRIMARY_TUMOR)
						
		$pSide_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, 
					type == FHIRConstants.LATERALITY, documentType == FHIRConstants.RECORD_SUMMARY,
					$sideName : name, summaryId == $t_summaryId)
										
		$mt : MergedTumor(lymphNodeSite==true, bodySide == $sideName, 
					 readyForRetraction == false)
	
	then

		//add new tumor
		Fact recTumor = $mt.getTumorSiteFactSet().iterator().next();
//System.out.println(" in mela-Regional_Lymph_Node_same side melanoma BODY_SITE: "+recTumor.getName());		
		
//System.out.println("\n*** mela-Regional_Lymph_Node_with_same_side for "+$mt.getBodySite()+ "for prim: "+ $t_summaryId);

		String newId = $mt.getTumorSummaryID();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact(recTumor, FHIRConstants.BODY_SITE, 
			$domain.getOntologyURI()+"#"+$mt.getBodySite(), FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); 
		tf.setName($mt.getBodySite());
		tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.getProvenanceFacts().addAll($mt.getTumorSiteFactSet());
		tf.addRulesApplied("mela-Regional_Lymph_Node_with_same_side");
		
		insert(new IdMapper(recTumor.getIdentifier(), tf.getIdentifier(), recTumor.getSummaryId(), tf.getSummaryId()));
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.REGIONAL_METASTASIS, tf, 
							$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
							FHIRConstants.TUMOR_TYPE);
													
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
		tumorTypeF.addRulesApplied("mela-Regional_Lymph_Node_with_same_side");

	    $mt.addBodyModifiersToRecordFact(tf, $cancerFact, $domain.getOntologyURI(), newId);
	    insert(tf);
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	

		insert (tumorTypeF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$mt.setReadyForRetraction(true);
		update ($mt);

		System.out.print(".");

end

rule "mela-Regional_Lymph_Node_primary_no_side"
	salience 88875
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain()

		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY,
				$cSummaryId : summaryId)
		
		//primary tumor			
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, 
					documentType == FHIRConstants.RECORD_SUMMARY, $t_summaryId: summaryId, 
					name==FHIRConstants.PRIMARY_TUMOR)
						
		not(Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, 
					type == FHIRConstants.LATERALITY, documentType == FHIRConstants.RECORD_SUMMARY,
					summaryId == $t_summaryId))			
					
		$mt : MergedTumor(lymphNodeSite==true, readyForRetraction == false)

	then
System.out.print(".");

		//add new tumor
		Fact recTumor = $mt.getTumorSiteFactSet().iterator().next();
//System.out.println("\n*** mela-Regional_Lymph_Node_primary_no_side melanoma BODY_SITE: "+recTumor.getName());
		
		String newId = $mt.getTumorSummaryID();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact(recTumor, FHIRConstants.BODY_SITE, 
					$domain.getOntologyURI()+"#"+$mt.getBodySite(), FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($cSummaryId);
		tf.setSummaryId(newId);
		tf.setName($mt.getBodySite());
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.getProvenanceFacts().addAll($mt.getTumorSiteFactSet());
		tf.addRulesApplied("mela-Regional_Lymph_Node_primary_no_side") ;
		insert(new IdMapper(recTumor.getIdentifier(), tf.getIdentifier(), recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.REGIONAL_METASTASIS, 
					tf, $cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, 
					FHIRConstants.RECORD_SUMMARY, FHIRConstants.TUMOR_TYPE);
		tumorTypeF.addRulesApplied("mela-Regional_Lymph_Node_primary_no_side");
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	
		$mt.addBodyModifiersToRecordFact(tf, $cancerFact, $domain.getOntologyURI(), newId);
		insert(tf);
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}		

		insert (tumorTypeF);

		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$mt.setReadyForRetraction(true);
		update ($mt);

		System.out.print(".");
end

/*
* If lymph npde is not on the same side as primary - consider it distant
*/
rule  "mela-distant_LymphNode"
		salience 88870
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain()	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, 
					$cSummaryId : summaryId)
		
		
		$stF: Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, 
					documentType != FHIRConstants.RECORD_SUMMARY,
					$deepOldSummaryId : summaryId,
					(name == "Lymph_Node" || ancestors  contains "Lymph_Node"))	
							
		$mt : MergedTumor(tumorSummaryIdSet contains $deepOldSummaryId, readyForRetraction == false) 
		
	then

		//add new tumor
		Fact bsFact = $mt.getTumorSiteFactSet().iterator().next();
		String newId = $mt.getTumorSummaryID();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact(bsFact, FHIRConstants.BODY_SITE, 
					$domain.getOntologyURI()+"#"+bsFact.getName(), FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($cSummaryId); 
		tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.addProvenanceFact(bsFact);
		tf.addRulesApplied("mela-distant_LymphNode");
		insert(new IdMapper(bsFact.getIdentifier(), tf.getIdentifier(), bsFact.getSummaryId(), newId));
		insert(tf);
////System.out.println("\n*** distant_LymphNode inserting TUMOR for diag: "+$tF.getName()+" newId: "+newId+"  tf: "+tf.getInfoDrools(false));
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.DISTANT_METASTASIS, 
						tf, $cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, 
						FHIRConstants.RECORD_SUMMARY, FHIRConstants.TUMOR_TYPE);
											
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
			
		$mt.addBodyModifiersToRecordFact(tf, $cancerFact, $domain.getOntologyURI(), newId);
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	
	
		insert (tumorTypeF);
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());		
		$mt.setReadyForRetraction(true);
		update ($mt);
System.out.print(".");		
end


/*
*Jeremy: 
* 1.Metastatic melanoma with multiple foci, with an unknown primary site is NOT a multiple primary
* 2.If it is impossible to determine if there is a single melanoma or multiple melanomas, classify as a single primary
*/
