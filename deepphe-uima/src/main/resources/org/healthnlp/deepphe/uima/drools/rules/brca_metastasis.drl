package org.healthnlp.deepphe.uima.drools;

import java.lang.Object;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fhir.fact.Fact;
import org.healthnlp.deepphe.fhir.fact.FactFactory;
import org.healthnlp.deepphe.fhir.fact.FactHelper;
import org.healthnlp.deepphe.fhir.fact.BodySiteFact;

import org.healthnlp.deepphe.fhir.summary.*;
import org.healthnlp.deepphe.uima.drools.*;



/*
* primaryTumor-2 :
* Olga: create TumorSummary here AND:
* If tumors are on the same side and hitologicType is ductal or there is histologic type specified = >combine them as one "primary"
* Tumors that are intraductal or ductal and Paget Disease are a single primary => 
* If you have two tumors that are located within the same breast and both tumors have HistologicalType=Ductal 
* and one or both of the tumors have Paget's Disease as a diagnosis, then you can merge the two tumors into one tumor with tumor type= "Primary".
*/
rule "primaryTumor-2-Ductal"
	salience 88879
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)  
	    
		$site_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, documentType != FHIRConstants.RECORD_SUMMARY,
					$t_summaryId: summaryId, (name==$domainName || ancestors contains $domainName))
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $t_summaryId)
		$hist_tFact : Fact(summaryType==FHIRConstants.TUMOR_PHENOTYPE, category == FHIRConstants.HAS_HISTOLOGIC_TYPE, $name : name, ($name=="Ductal" || $name=="Lobular"), 
				documentType != FHIRConstants.RECORD_SUMMARY,containerIdentifier contains $t_summaryId)
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $site_tFact, bodySite == $domainName, bodySide == $sideName, 
			$histologicType :histologicType, ($histologicType =="Ductal" || $histologicType == "Lobular"), readyForRetraction == false)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $site_tFact))
		
		$sameTumors : List()
      	from collect( MergedTumor(tumorSiteFactSet not contains $site_tFact, bodySite == $domainName, $bodySide1 : bodySide, 
      			($bodySide1 == $sideName || $bodySide1 == ""), readyForRetraction == false,
      				$histologicType2 :histologicType, ($histologicType2 =="Ductal" || $histologicType2 == "Lobular")))
		
	then
	//add new tumor
System.out.print(".");
		
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();		
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($site_tFact, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$site_tFact.getName(), 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.addProvenanceFact($site_tFact);
		tf.addRulesApplied("primaryTumor");
		insert(new IdMapper($site_tFact.getIdentifier(), tf.getIdentifier(), $site_tFact.getDocumentType(), $site_tFact.getSummaryId(), tf.getSummaryId()));
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.PRIMARY_TUMOR, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
															FHIRConstants.TUMOR_TYPE);
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
															FHIRConstants.LATERALITY);
		
	    tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);

		tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
//System.out.println("primaryTumorDuct inserting QF: "+qf.getInfo());
			insert(qf);
		}	
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	


		insert (tumorTypeF);
		insert (tumorsideF);

//System.out.println("primaryTumor inserting tumorTypeF: "+tumorTypeF.getInfo());
//System.out.println("primaryTumor inserting tumorsideF: "+tumorsideF.getInfo());
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());

		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		
System.out.print(".");	

end


/* 
*primaryTumor :
* If you have a tumor located in the same organ (breast) as the cancer, then tumor type = "primary". 
* ALSO secondPrimary1-1 :
* If tumor 1 is located on the right side of the body and tumor 2 is on the left, then tumor 2 has tumor type primary tumor. 
* ALSO secondPrimary1-2 : 
* If tumor 1 is located on the left side of the body and tumor 2 is on the right, then tumor 2 has tumor type primary tumor. 
*/
rule "primaryTumor"
	salience 88877
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		$tumorFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $tumor_bs_name :name, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$tumor_id : identifier, rulesApplied not contains "primaryTumor", $tumor_ancestors : ancestors, $t_summaryId : summaryId,
					($tumor_bs_name==$domainName || $tumor_ancestors contains $domainName))
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $t_summaryId)			
		$tl_1 : MergedTumor(tumorSiteFactSet contains $tumorFact, bodySide == $sideName, readyForRetraction == false)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $tumorFact))
		
	then
		modify($tumorFact){	addRulesApplied("primaryTumor") }
//System.out.println("primaryTumor: "+$tl_1.getInfo());
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($tumorFact, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$tumorFact.getName(), 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier($tumorFact.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($tumorFact);
		tf.addRulesApplied("primaryTumor");
		insert(new IdMapper($tumorFact.getIdentifier(), tf.getIdentifier(), $tumorFact.getDocumentType(), $tumorFact.getSummaryId(), newId));
		insert(tf);
//System.out.println("*** primaryTumor inserting TUMOR: "+tf.getInfo());
//System.out.println("primaryTumor Q_size: "+$tl_1.getQuadrantFactSet().size());
//System.out.println("primaryTumor CLo_size: "+$tl_1.getClockfacePosFactSet().size());
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.PRIMARY_TUMOR, $tumorFact, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
															FHIRConstants.TUMOR_TYPE);
		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
															FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
		
		tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);

		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
//System.out.println("primaryTumor inserting QF: "+qf.getInfo());
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
//System.out.println("primaryTumor inserting CLOCKF: "+qf.getInfo());
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	


		insert (tumorTypeF);
		insert (tumorsideF);

//System.out.println("primaryTumor inserting tumorTypeF: "+tumorTypeF.getInfo());
//System.out.println("primaryTumor inserting tumorsideF: "+tumorsideF.getInfo());
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());

		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);
System.out.print(".");		
end


rule "regionalRecurrence1-1-Axillary_Lymph_Node"
	salience 88876
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						($recTumorName == "Axillary_Lymph_Node" || $rectAncestors contains "Axillary_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-1-Axillary_Lymph_Node")
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, documentType == FHIRConstants.RECORD_SUMMARY,
					$t_summaryId: summaryId, name==FHIRConstants.PRIMARY_TUMOR, containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType == FHIRConstants.RECORD_SUMMARY,
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then
System.out.print(".");
		modify($recTumor){	addRulesApplied("regionalRecurrence1-1-Axillary_Lymph_Node") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.REGIONAL_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);
		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)	
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end


/*
* regionalRecurrence1-2 :
* If there is a tumor located in the infraclavicular lymph node or children located on the same side of the body as the primary tumor, 
* then the tumor(s) in the infraclavicular lymph nodes have a tumor type of regional recurrences 
*/
rule "regionalRecurrence1-2-Infraclavicular_Lymph_Node"
	salience 88875
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						($recTumorName == "Infraclavicular_Lymph_Node" || $rectAncestors contains "Infraclavicular_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-2-Infraclavicular_Lymph_Node")
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, documentType == FHIRConstants.RECORD_SUMMARY,
					$t_summaryId: summaryId, name==FHIRConstants.PRIMARY_TUMOR, containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType == FHIRConstants.RECORD_SUMMARY,
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("regionalRecurrence1-2-Infraclavicular_Lymph_Node") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.REGIONAL_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);
		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)	
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end

/*
* regionalRecurrence1-3a :
* If there is a tumor located in the supraclavicular lymph node or children located on the same side of the body 
* as the primary tumor, then the tumor(s) in the supraclavicular internal mammary/parasternal lymph nodes 
* have a tumor type of regional recurrences 
*/
rule "regionalRecurrence1-3a"
	salience 88874
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						($recTumorName == "Supraclavicular_Lymph_Node" || $rectAncestors contains "Supraclavicular_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-3a")
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, documentType == FHIRConstants.RECORD_SUMMARY,
					$t_summaryId: summaryId, name==FHIRConstants.PRIMARY_TUMOR, containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType == FHIRConstants.RECORD_SUMMARY,
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("regionalRecurrence1-3a") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.REGIONAL_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);
		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end


/*
* regionalRecurrence1-3b :
* If there is a tumor located in the internal mammary/parasternal lymph node or children located on the same side of the body 
* as the primary tumor, then the tumor(s) in the supraclavicular internal mammary/parasternal lymph nodes 
* have a tumor type of regional recurrences 
*/
rule "regionalRecurrence1-3b"
	salience 88873
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						($recTumorName == "Internal_Mammary_Lymph_Node" || $rectAncestors contains "Internal_Mammary_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-3b")
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, documentType == FHIRConstants.RECORD_SUMMARY,
					$t_summaryId: summaryId, name==FHIRConstants.PRIMARY_TUMOR, containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType == FHIRConstants.RECORD_SUMMARY,
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("regionalRecurrence1-3b") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.REGIONAL_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);
		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end



/*
* regionalRecurrence1-4 :
* If there is a tumor located in the intramammary lymph node or children located on the same side of the body 
* as the primary tumor, then the tumor(s) in the intramammary lymph nodes have a tumor type of regional recurrences 
*/
rule "regionalRecurrence1-4"
	salience 88872
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						($recTumorName == "Intramammary_Lymph_Node" || $rectAncestors contains "Intramammary_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-4")
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, documentType == FHIRConstants.RECORD_SUMMARY,
					$t_summaryId: summaryId, name==FHIRConstants.PRIMARY_TUMOR, containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType == FHIRConstants.RECORD_SUMMARY,
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("regionalRecurrence1-4") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.REGIONAL_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);
		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)	
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end

/*
* regionalRecurrence1-5 :
* If there is a tumor located in the lymph node or children located on the same side of the body 
* as the primary tumor, then the tumor(s) in the lymph nodes have a tumor type of regional recurrences 
*/
rule "regionalRecurrence1-5"
	salience 88871
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						$recTumorName == "Lymph_Node", $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-5")
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, documentType == FHIRConstants.RECORD_SUMMARY,
					$t_summaryId: summaryId, name==FHIRConstants.PRIMARY_TUMOR, containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType == FHIRConstants.RECORD_SUMMARY,
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("regionalRecurrence1-5") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.REGIONAL_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);

		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)	
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end



/*
* distantRecurrence1:
* Primary tumor located on the same side as a tumor in any other type of lymph nodes except for axillary, 
* infraclavicular, supraclavicular internal mammary/parasternal, or intramammary are considered distant metastasis  
*/
rule "distantRecurrence1"
	salience 88870
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						($recTumorName != "Axillary_Lymph_Node" && $rectAncestors not contains "Axillary_Lymph_Node" &&
						$recTumorName != "Infraclavicular_Lymph_Node" && $rectAncestors not contains "Infraclavicular_Lymph_Node" &&
						$recTumorName != "Supraclavicular_Lymph_Node" && $rectAncestors not contains "Supraclavicular_Lymph_Node" &&
						$recTumorName != "Internal_Mammary_Lymph_Node" && $rectAncestors not contains "Internal_Mammary_Lymph_Node" &&
						$recTumorName != "Intramammary_Lymph_Node" && $rectAncestors not contains "Intramammary_Lymph_Node"), 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence1")
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, documentType == FHIRConstants.RECORD_SUMMARY,
					$t_summaryId: summaryId, name==FHIRConstants.PRIMARY_TUMOR, containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType == FHIRConstants.RECORD_SUMMARY,
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence1") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), newId, $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.DISTANT_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, 
														FHIRConstants.RECORD_SUMMARY, FHIRConstants.TUMOR_TYPE);
		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, 
														FHIRConstants.RECORD_SUMMARY, FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, 
														FHIRConstants.RECORD_SUMMARY, FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, 
														FHIRConstants.RECORD_SUMMARY, FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end


/*
* distantRecurrence2-1:
*  	If there is a tumor located in a lymph node on the opposite side of the body as the primary tumor, 
* then the tumor located in the lymph node has type distant recurrence.  
*/
rule "distantRecurrence2-1"
	salience 88869
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						($recTumorName == "Lymph_Node" && $rectAncestors contains "Lymph_Node"), 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence2-1")
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_TUMOR_TYPE, documentType == FHIRConstants.RECORD_SUMMARY,
					$t_summaryId: summaryId, name==FHIRConstants.PRIMARY_TUMOR, containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType == FHIRConstants.RECORD_SUMMARY,
					name != $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence2-1") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.DISTANT_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);
		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF); 
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)	
		}		

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end

/*
* distantRecurrence3::
*  If there is tumor located in the Sternal Bone and children, then the tumor has type Distant Recurrence 
*/
rule "distantRecurrence3"
	salience 88868
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						$recTumorName == "Sternum", 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence3")
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, readyForRetraction == false)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence3") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.DISTANT_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
		
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}
		
		insert (tumorTypeF);
		
		//side if any
		Set<Fact> qSet = $tl_1.getBodySideFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.LATERALITY);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end


/*
* distantRecurrence4a:
* A tumor located in any organ other than breast (excluding those listed as local, regional and second primary events above) 
* are considered distant recurrence. EXCLUSIONS: axillary lymph node, infraclavicular lymph node, supraclavicular internal 
* mammary/parasternal lymph node, intramammary lymph node  
* Olga:
* tumor has body side
*/
rule "distantRecurrence4a"
	salience 88767
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)	
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						($recTumorName != "Axillary_Lymph_Node" && $rectAncestors not contains "Axillary_Lymph_Node" &&
						$recTumorName != "Infraclavicular_Lymph_Node" && $rectAncestors not contains "Infraclavicular_Lymph_Node" &&
						$recTumorName != "Supraclavicular_Lymph_Node" && $rectAncestors not contains "Supraclavicular_Lymph_Node" &&
						$recTumorName != "Internal_Mammary_Lymph_Node" && $rectAncestors not contains "Internal_Mammary_Lymph_Node" &&
						$recTumorName != "Intramammary_Lymph_Node" && $rectAncestors not contains "Intramammary_Lymph_Node"), 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence4")
		$side_tFact : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence4") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.DISTANT_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);
		
		Fact tumorsideF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+$sideName, tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.LATERALITY);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF); 
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+f.getName(), tf, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_BODY_MODIFIER, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	
		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

System.out.print(".");

end

/*
* distantRecurrence4b:
* A tumor located in any organ other than breast (excluding those listed as local, regional and second primary events above) 
* are considered distant recurrence. EXCLUSIONS: axillary lymph node, infraclavicular lymph node, supraclavicular internal 
* mammary/parasternal lymph node, intramammary lymph node  
* Olga:
* tumor has NObody side
*/
rule "distantRecurrence4b"
	salience 87766
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName, $domainName == FHIRConstants.DOMAIN_BREAST)
		$cancerFact : Fact(summaryType==FHIRConstants.CANCER_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, name == $domainName, 
						$newSummaryId : summaryId)
		//rec tumor
		$recTumor : Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_SITE, $recTumorName : name, $rectAncestors : ancestors, 
			documentType != FHIRConstants.RECORD_SUMMARY,
						($recTumorName != "Axillary_Lymph_Node" && $rectAncestors not contains "Axillary_Lymph_Node" &&
						$recTumorName != "Infraclavicular_Lymph_Node" && $rectAncestors not contains "Infraclavicular_Lymph_Node" &&
						$recTumorName != "Supraclavicular_Lymph_Node" && $rectAncestors not contains "Supraclavicular_Lymph_Node" &&
						$recTumorName != "Internal_Mammary_Lymph_Node" && $rectAncestors not contains "Internal_Mammary_Lymph_Node" &&
						$recTumorName != "Intramammary_Lymph_Node" && $rectAncestors not contains "Intramammary_Lymph_Node"), 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence4")
		not(Fact(summaryType==FHIRConstants.TUMOR_SUMMARY, category == FHIRConstants.HAS_BODY_MODIFIER, type == FHIRConstants.LATERALITY, 
			documentType != FHIRConstants.RECORD_SUMMARY,
					$sideName : name, containerIdentifier contains $recSummaryId))
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, readyForRetraction == false)
		not (Fact (summaryType==FHIRConstants.TUMOR_SUMMARY, documentType == FHIRConstants.RECORD_SUMMARY, provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence4") }
		//add new tumor
		String newId = FHIRConstants.TUMOR_SUMMARY +"-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, FHIRConstants.BODY_SITE, $domain.getOntologyURI()+"#"+$recTumorName, 
			FHIRConstants.RECORD_SUMMARY);
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, $domain.getOntologyURI());
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier($domain.getOntologyURI()+"#"+FHIRConstants.DISTANT_METASTASIS, $recTumor, 
														$cancerFact, FHIRConstants.TUMOR_SUMMARY, FHIRConstants.HAS_TUMOR_TYPE, FHIRConstants.RECORD_SUMMARY, 
														FHIRConstants.TUMOR_TYPE);
														
		tumorTypeF.addContainerIdentifier(newId);
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	
		
		insert (tumorTypeF);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");
end
